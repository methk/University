import { BehaviorSubject } from 'rxjs';
import RadixFeeProvider from '../fees/RadixFeeProvider';
import { radixUniverse } from '../universe/RadixUniverse';
import { radixTokenManager } from '../..';
import { RadixApplicationPayloadAtom, RadixConsumable, RadixConsumer, RadixECKeyPair, RadixTransactionAtom, RadixTokenClass, } from '../RadixAtomModel';
export default class RadixTransactionBuilder {
    constructor() {
        this.particles = [];
        this.action = 'STORE';
        this.operation = 'TRANSFER';
    }
    /**
     * Creates transfer atom
     * @param from Sender account, needs to have RadixAccountTransferSystem
     * @param to Receiver account
     * @param token The TokenClass or an ISO string name
     * @param decimalQuantity
     * @param [message] Optional reference message
     */
    static createTransferAtom(from, to, token, decimalQuantity, message) {
        return new RadixTransactionBuilder().createTransferAtom(from, to, token, decimalQuantity, message);
    }
    /**
     * Creates transfer atom
     * @param from Sender account, needs to have RadixAccountTransferSystem
     * @param to Receiver account
     * @param token The TokenClass or an ISO string name
     * @param decimalQuantity
     * @param [message] Optional reference message
     */
    createTransferAtom(from, to, token, decimalQuantity, message) {
        this.type = 'TRANSFER';
        if (isNaN(decimalQuantity)) {
            throw new Error('Amount is not a valid number');
        }
        let tokenClass;
        if (typeof token === 'string') {
            tokenClass = radixTokenManager.getTokenByISO(token);
        }
        else if (token instanceof RadixTokenClass) {
            tokenClass = token;
        }
        else {
            throw new Error('Invalid token supplied');
        }
        const quantity = tokenClass.toSubunits(decimalQuantity);
        if (quantity < 0) {
            throw new Error('Cannot send negative amount');
        }
        else if (quantity === 0 && decimalQuantity > 0) {
            const decimalPlaces = Math.log10(tokenClass.sub_units);
            throw new Error(`You can only specify up to ${decimalPlaces} decimal places`);
        }
        else if (quantity === 0 && decimalQuantity === 0) {
            throw new Error(`Cannot send 0`);
        }
        const transferSytem = from.getSystem('TRANSFER');
        if (quantity > transferSytem.balance[tokenClass.id.toString()]) {
            throw new Error('Insufficient funds');
        }
        const particles = [];
        const unspentConsumables = transferSytem.getUnspentConsumables();
        let consumerQuantity = 0;
        for (const [, consumable] of unspentConsumables.entries()) {
            if (consumable.asset_id.toString() !== tokenClass.id.toString()) {
                continue;
            }
            const consumer = new RadixConsumer(consumable);
            particles.push(consumer);
            consumerQuantity += consumer.quantity;
            if (consumerQuantity >= quantity) {
                break;
            }
        }
        // Create consumables
        const recipientConsumable = new RadixConsumable();
        recipientConsumable.asset_id = tokenClass.id;
        recipientConsumable.quantity = quantity;
        // recipientConsumable.quantity = Long.fromNumber(quantity)
        recipientConsumable.destinations = [to.keyPair.getUID()];
        recipientConsumable.nonce = Date.now();
        recipientConsumable.owners = [
            RadixECKeyPair.fromRadixKeyPair(to.keyPair)
        ];
        particles.push(recipientConsumable);
        // Transfer reminder back to self
        if (consumerQuantity - quantity > 0) {
            const reminderConsumable = new RadixConsumable();
            reminderConsumable.asset_id = tokenClass.id;
            reminderConsumable.quantity = consumerQuantity - quantity;
            reminderConsumable.destinations = [from.keyPair.getUID()];
            reminderConsumable.nonce = Date.now();
            reminderConsumable.owners = [
                RadixECKeyPair.fromRadixKeyPair(from.keyPair)
            ];
            particles.push(reminderConsumable);
        }
        this.action = 'STORE';
        this.operation = 'TRANSFER';
        this.particles = particles;
        this.recipients = [from, to];
        if (message) {
            this.payload = message;
        }
        return this;
    }
    /**
     * Creates payload atom
     * @param from
     * @param to
     * @param applicationId
     * @param payload
     * @param [encrypted] Sets if the message should be encrypted using ECIES
     */
    static createPayloadAtom(readers, applicationId, payload, encrypted = true) {
        return new RadixTransactionBuilder().createPayloadAtom(readers, applicationId, payload, encrypted);
    }
    /**
     * Creates payload atom
     * @param from
     * @param to
     * @param applicationId
     * @param payload
     * @param [encrypted] Sets if the message should be encrypted using ECIES
     */
    createPayloadAtom(readers, applicationId, payload, encrypted = true) {
        this.type = 'PAYLOAD';
        const recipients = [];
        for (const account of readers) {
            recipients.push(account);
        }
        this.recipients = recipients;
        this.applicationId = applicationId;
        this.payload = payload;
        this.encrypted = encrypted;
        return this;
    }
    /**
     * Creates radix messaging application payload atom
     * @param from
     * @param to
     * @param message
     */
    static createRadixMessageAtom(from, to, message) {
        return new RadixTransactionBuilder().createRadixMessageAtom(from, to, message);
    }
    /**
     * Creates radix messaging application payload atom
     * @param from
     * @param to
     * @param message
     */
    createRadixMessageAtom(from, to, message) {
        this.type = 'PAYLOAD';
        const recipients = [];
        recipients.push(from);
        recipients.push(to);
        const payload = JSON.stringify({
            to: to.getAddress(),
            from: from.getAddress(),
            content: message,
        });
        this.recipients = recipients;
        this.applicationId = 'radix-messaging';
        this.payload = payload;
        this.encrypted = true;
        return this;
    }
    /**
     * Builds the atom, finds a node to submit to, adds network fee, signs the atom and submits
     * @param signer
     * @returns a BehaviourSubject that streams the atom status updates
     */
    signAndSubmit(signer) {
        let atom = null;
        if (this.type === 'TRANSFER') {
            atom = new RadixTransactionAtom();
            atom.action = this.action;
            atom.operation = this.operation;
            atom.particles = this.particles;
            atom.destinations = this.recipients.map(account => account.keyPair.getUID());
            atom.timestamps = { default: Date.now() };
            if (this.payload) {
                atom.addEncryptedPayload(this.payload, this.recipients.map(account => account.keyPair));
            }
        }
        else if (this.type === 'PAYLOAD') {
            atom = RadixApplicationPayloadAtom.withEncryptedPayload(this.payload, this.recipients.map(account => account.keyPair), this.applicationId, this.encrypted);
            atom.particles = this.particles;
        }
        else {
            throw new Error('Atom details have not been specified, call one of the builder methods first');
        }
        // Find a shard, any of the participant shards is ok
        const shard = this.recipients[0].keyPair.getShard();
        // Get node from universe
        let nodeConnection = null;
        const stateSubject = new BehaviorSubject('FINDING_NODE');
        let signedAtom = null;
        radixUniverse
            .getNodeConnection(shard)
            .then(connection => {
            nodeConnection = connection;
            // Add POW fee
            stateSubject.next('GENERATING_POW');
            return RadixFeeProvider.generatePOWFee(radixUniverse.universeConfig.getMagic(), radixTokenManager.getTokenByISO('POW'), atom, nodeConnection);
        })
            .then(powFeeConsumable => {
            atom.particles.push(powFeeConsumable);
            // Sing atom
            stateSubject.next('SIGNING');
            return signer.signAtom(atom);
        })
            .then(_signedAtom => {
            signedAtom = _signedAtom;
            // Push atom into recipient accounts to minimize delay
            for (const recipient of this.recipients) {
                recipient._onAtomReceived({
                    action: 'STORE',
                    atom: signedAtom,
                });
            }
            const submissionSbuject = nodeConnection.submitAtom(signedAtom);
            submissionSbuject.subscribe(stateSubject);
            submissionSbuject.subscribe({ error: error => {
                    // Delete atom from recipient accounts
                    for (const recipient of this.recipients) {
                        recipient._onAtomReceived({
                            action: 'DELETE',
                            atom: signedAtom,
                        });
                    }
                } });
        })
            .catch(error => {
            stateSubject.error(error);
        });
        return stateSubject;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhUcmFuc2FjdGlvbkJ1aWxkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbW9kdWxlcy90eGJ1aWxkZXIvUmFkaXhUcmFuc2FjdGlvbkJ1aWxkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQTtBQUt0QyxPQUFPLGdCQUFnQixNQUFNLDBCQUEwQixDQUFBO0FBRXZELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQTtBQUN6RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxPQUFPLENBQUE7QUFFekMsT0FBTyxFQUNILDJCQUEyQixFQUUzQixlQUFlLEVBQ2YsYUFBYSxFQUNiLGNBQWMsRUFFZCxvQkFBb0IsRUFDcEIsZUFBZSxHQUVsQixNQUFNLG1CQUFtQixDQUFBO0FBRTFCLE1BQU0sQ0FBQyxPQUFPLE9BQU8sdUJBQXVCO0lBVXhDO1FBTlEsY0FBUyxHQUFvQixFQUFFLENBQUE7UUFDL0IsV0FBTSxHQUFHLE9BQU8sQ0FBQTtRQUNoQixjQUFTLEdBQUcsVUFBVSxDQUFBO0lBSWYsQ0FBQztJQUdoQjs7Ozs7OztPQU9HO0lBQ0ksTUFBTSxDQUFDLGtCQUFrQixDQUM1QixJQUFrQixFQUNsQixFQUFnQixFQUNoQixLQUErQixFQUMvQixlQUF1QixFQUN2QixPQUFnQjtRQUVoQixPQUFPLElBQUksdUJBQXVCLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxlQUFlLEVBQUUsT0FBTyxDQUFDLENBQUE7SUFDdEcsQ0FBQztJQUdEOzs7Ozs7O09BT0c7SUFDSSxrQkFBa0IsQ0FDckIsSUFBa0IsRUFDbEIsRUFBZ0IsRUFDaEIsS0FBK0IsRUFDL0IsZUFBdUIsRUFDdkIsT0FBZ0I7UUFFaEIsSUFBSSxDQUFDLElBQUksR0FBRyxVQUFVLENBQUE7UUFFdEIsSUFBSSxLQUFL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