"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var RadixUniverseConfig_1 = tslib_1.__importDefault(require("./RadixUniverseConfig"));
var RadixNodeDiscoveryFromNodeFinder_1 = tslib_1.__importDefault(require("./RadixNodeDiscoveryFromNodeFinder"));
var RadixNodeDiscoveryFromSeed_1 = tslib_1.__importDefault(require("./RadixNodeDiscoveryFromSeed"));
var RadixNodeConnection_1 = tslib_1.__importDefault(require("./RadixNodeConnection"));
var RadixUtil_1 = tslib_1.__importDefault(require("../common/RadixUtil"));
var RadixTokenManager_1 = require("../token/RadixTokenManager");
var RadixLogger_1 = require("../common/RadixLogger");
var long_1 = tslib_1.__importDefault(require("long"));
var promise_retry_1 = tslib_1.__importDefault(require("promise-retry"));
var ipaddr_js_1 = tslib_1.__importDefault(require("ipaddr.js"));
var RadixUniverse = /** @class */ (function () {
    function RadixUniverse() {
        var _this = this;
        this.initialized = false;
        this.liveNodes = [];
        this.connectedNodes = [];
        this.lastNetworkUpdate = 0;
        this.networkUpdateInterval = 1000 * 60 * 10;
        /**
         * Close all open connections
         * Recommended to call this before quitting the application, so that nodes can close the corresponding open connections as well
         */
        this.closeAllConnections = function () {
            var e_1, _a;
            try {
                for (var _b = tslib_1.__values(_this.connectedNodes), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var connection = _c.value;
                    connection.close();
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
    }
    /**
     * Bootstraps the universe with a specific configuration
     * Must be called before performing any operations
     * Use one of the predefined static configurations in this class
     * @param config
     */
    RadixUniverse.prototype.bootstrap = function (config) {
        this.universeConfig = config.universeConfig;
        this.nodeDiscovery = config.nodeDiscovery;
        this.nodeRPCAddress = config.nodeRPCAddress;
        this.initialized = true;
        RadixTokenManager_1.radixTokenManager.initialize();
    };
    /**
     * Given an IP address this function resolves a deterministic
     * DNS record in the radixnode.net domain.
     *
     * @param address IP address or hostname
     */
    RadixUniverse.resolveNodeName = function (address) {
        try {
            var ipbytes = ipaddr_js_1.default.parse(address).toByteArray();
            if (ipbytes.length == 4) { // IPv4
                // trivial but safe left-shift function that does not overflow
                var shl = function (base, exp) { return base * Math.pow(2, exp); };
                // use + instead of | (bitwise or) because it overflows
                var ip = ipbytes[3] + shl(ipbytes[2], 8) + shl(ipbytes[1], 16) + shl(ipbytes[0], 24);
                return "a" + ip.toString(36) + ".radixnode.net";
            }
            RadixLogger_1.logger.warn('No base36 encoder for IPv6 yet');
            return "[" + address + "]";
        }
        catch (err) {
            // the address has neither IPv6 nor IPv4 format => hostname
        }
        return address;
    };
    /**
     * Gets the universe magic byte, used mainly for generating an address from a public key
     * @returns
     */
    RadixUniverse.prototype.getMagicByte = function () {
        return this.universeConfig.getMagicByte();
    };
    RadixUniverse.prototype.loadPeersFromBootstrap = function () {
        var _this = this;
        return promise_retry_1.default(function (retry, attempt) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var _a, error_1;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        _a = this;
                        return [4 /*yield*/, this.nodeDiscovery.loadNodes()];
                    case 1:
                        _a.liveNodes = _b.sent();
                        this.lastNetworkUpdate = Date.now();
                        return [2 /*return*/, this.liveNodes];
                    case 2:
                        error_1 = _b.sent();
                        RadixLogger_1.logger.error(error_1);
                        retry();
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        }); }, {
            retries: 1000,
            maxtimeout: 60000
        });
    };
    /**
     * Gets a RadixNodeConnection for a specified shard
     * Updates the node list if neccessary
     * @param shard
     * @returns node connection
     */
    RadixUniverse.prototype.getNodeConnection = function (shard) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var e_2, _a, e_3, _b;
            try {
                // Find active connection, return
                for (var _c = tslib_1.__values(_this.connectedNodes), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var node = _d.value;
                    if (node.isReady() && _this.canNodeServiceShard(node.node, shard)) {
                        RadixLogger_1.logger.info('Got an active connection');
                        return resolve(node);
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_2) throw e_2.error; }
            }
            var _loop_1 = function (node) {
                if (_this.canNodeServiceShard(node.node, shard)) {
                    RadixLogger_1.logger.info('Got a pending connection');
                    // Wait for ready or error
                    node.on('open', function () {
                        resolve(node);
                    });
                    node.on('closed', function () {
                        resolve(_this.getNodeConnection(shard));
                    });
                    return { value: void 0 };
                }
            };
            try {
                // Failing that, find a pending node connection
                for (var _e = tslib_1.__values(_this.connectedNodes), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var node = _f.value;
                    var state_1 = _loop_1(node);
                    if (typeof state_1 === "object")
                        return state_1.value;
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                }
                finally { if (e_3) throw e_3.error; }
            }
            // Open a new connection, return when ready
            RadixLogger_1.logger.info('Opening a new connection');
            _this.openNodeConnection(shard).then(function (connection) {
                if (connection) {
                    resolve(connection);
                }
                else {
                    reject("Coudln't find a node to connect to");
                }
            });
        });
    };
    RadixUniverse.prototype.openNodeConnection = function (shard) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _loop_2, this_1, _a, _b, node, state_2, e_4_1;
            var e_4, _c;
            var _this = this;
            return tslib_1.__generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (!(Date.now() - this.lastNetworkUpdate > this.networkUpdateInterval)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.loadPeersFromBootstrap()];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2:
                        // Randomize node order every time
                        this.liveNodes = RadixUtil_1.default.shuffleArray(this.liveNodes);
                        _loop_2 = function (node) {
                            var connection_1, error_2;
                            return tslib_1.__generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (!this_1.canNodeServiceShard(node, shard)) return [3 /*break*/, 5];
                                        connection_1 = new RadixNodeConnection_1.default(node, this_1.nodeRPCAddress);
                                        this_1.connectedNodes.push(connection_1);
                                        connection_1.on('closed', function () {
                                            // Remove connection from connected nodes 
                                            var nodeIndex = _this.connectedNodes.indexOf(connection_1);
                                            if (nodeIndex > -1) {
                                                _this.connectedNodes.splice(nodeIndex, 1);
                                            }
                                        });
                                        _a.label = 1;
                                    case 1:
                                        _a.trys.push([1, 3, , 4]);
                                        return [4 /*yield*/, connection_1.openConnection()];
                                    case 2:
                                        _a.sent();
                                        return [3 /*break*/, 4];
                                    case 3:
                                        error_2 = _a.sent();
                                        RadixLogger_1.logger.error(error_2);
                                        return [2 /*return*/, { value: null }];
                                    case 4: return [2 /*return*/, { value: connection_1 }];
                                    case 5: return [2 /*return*/];
                                }
                            });
                        };
                        this_1 = this;
                        _d.label = 3;
                    case 3:
                        _d.trys.push([3, 8, 9, 10]);
                        _a = tslib_1.__values(this.liveNodes), _b = _a.next();
                        _d.label = 4;
                    case 4:
                        if (!!_b.done) return [3 /*break*/, 7];
                        node = _b.value;
                        return [5 /*yield**/, _loop_2(node)];
                    case 5:
                        state_2 = _d.sent();
                        if (typeof state_2 === "object")
                            return [2 /*return*/, state_2.value];
                        _d.label = 6;
                    case 6:
                        _b = _a.next();
                        return [3 /*break*/, 4];
                    case 7: return [3 /*break*/, 10];
                    case 8:
                        e_4_1 = _d.sent();
                        e_4 = { error: e_4_1 };
                        return [3 /*break*/, 10];
                    case 9:
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_4) throw e_4.error; }
                        return [7 /*endfinally*/];
                    case 10: return [2 /*return*/, null];
                }
            });
        });
    };
    RadixUniverse.prototype.canNodeServiceShard = function (node, shard) {
        if (node.system) {
            var low = long_1.default.fromValue(node.system.shards.low);
            var high = long_1.default.fromValue(node.system.shards.high);
            if (high.lessThan(low)) {
                // Wrap around
                return (shard.greaterThanOrEqual(low) || shard.lessThanOrEqual(high));
            }
            else {
                return (shard.greaterThanOrEqual(low) && shard.lessThanOrEqual(high));
            }
        }
        return false;
    };
    RadixUniverse.ALPHANET = {
        universeConfig: RadixUniverseConfig_1.default.ALPHANET,
        nodeDiscovery: new RadixNodeDiscoveryFromNodeFinder_1.default('https://alphanet.radixdlt.com/node-finder', function (nodeIp) { return "https://alphanet.radixdlt.com/node/" + nodeIp + "/rpc"; }),
        nodeRPCAddress: function (nodeIp) { return "wss://alphanet.radixdlt.com/node/" + nodeIp + "/rpc"; },
    };
    RadixUniverse.ALPHANET2 = {
        universeConfig: RadixUniverseConfig_1.default.ALPHANET2,
        nodeDiscovery: new RadixNodeDiscoveryFromNodeFinder_1.default('https://alphanet2.radixdlt.com/node-finder', function (nodeIp) { return "https://" + RadixUniverse.resolveNodeName(nodeIp) + "/rpc"; }),
        nodeRPCAddress: function (nodeIp) { return "wss://" + RadixUniverse.resolveNodeName(nodeIp) + "/rpc"; },
    };
    RadixUniverse.HIGHGARDEN = {
        universeConfig: RadixUniverseConfig_1.default.HIGHGARDEN,
        nodeDiscovery: new RadixNodeDiscoveryFromNodeFinder_1.default('https://highgarden.radixdlt.com/node-finder', function (nodeIp) { return "https://highgarden.radixdlt.com/node/" + nodeIp + "/rpc"; }),
        nodeRPCAddress: function (nodeIp) { return "wss://highgarden.radixdlt.com/node/" + nodeIp + "/rpc"; },
    };
    RadixUniverse.SUNSTONE = {
        universeConfig: RadixUniverseConfig_1.default.SUNSTONE,
        nodeDiscovery: new RadixNodeDiscoveryFromNodeFinder_1.default('https://sunstone.radixdlt.com/node-finder', function (nodeIp) { return "https://" + nodeIp + "/rpc"; }),
        nodeRPCAddress: function (nodeIp) { return "wss://" + nodeIp + ":443/rpc"; },
    };
    RadixUniverse.WINTERFELL = {
        universeConfig: RadixUniverseConfig_1.default.WINTERFELL,
        nodeDiscovery: new RadixNodeDiscoveryFromSeed_1.default('http://52.190.0.18:8080/rpc'),
        nodeRPCAddress: function (nodeIp) { return "ws://" + nodeIp + ":8080/rpc"; },
    };
    RadixUniverse.WINTERFELL_LOCAL = {
        universeConfig: RadixUniverseConfig_1.default.WINTERFELL_LOCAL,
        nodeDiscovery: new RadixNodeDiscoveryFromSeed_1.default('http://localhost:8080/rpc'),
        nodeRPCAddress: function (nodeIp) { return "ws://127.0.0.1:8080/rpc"; },
    };
    return RadixUniverse;
}());
exports.default = RadixUniverse;
exports.radixUniverse = new RadixUniverse();
//# sourceMappingURL=data:application/json;base64,