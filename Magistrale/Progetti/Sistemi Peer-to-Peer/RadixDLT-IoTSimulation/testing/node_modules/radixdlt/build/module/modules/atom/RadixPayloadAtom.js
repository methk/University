import RadixECIES from '../crypto/RadixECIES';
import { RadixAtom, RadixBase64, RadixEncryptor } from '../RadixAtomModel';
import EC from 'elliptic';
const ec = new EC.ec('secp256k1');
export default class RadixPayloadAtom extends RadixAtom {
    constructor(json) {
        super(json);
        this.serializationProperties.push('encrypted');
        this.serializationProperties.push('encryptor');
    }
    getDecryptedPayload(keyPair) {
        if (this.encrypted && this.encryptor) {
            const rawPayload = this.encryptor.decrypt(this.encrypted, keyPair);
            return rawPayload.toString();
        }
        else if (this.encrypted) {
            const payload = this.encrypted.data.toString();
            return payload;
        }
        throw new Error('No payload');
    }
    addEncryptedPayload(payload, recipients) {
        // Generate key pair
        let ephemeral = ec.genKeyPair();
        // Encrypt key with receivers
        let encryptor = new RadixEncryptor();
        encryptor.protectors = [];
        for (let recipient of recipients) {
            encryptor.protectors.push(new RadixBase64(RadixECIES.encrypt(recipient.getPublic(), Buffer.from(ephemeral.getPrivate('hex'), 'hex'))));
        }
        this.encryptor = encryptor;
        // Encrypt message
        this.encrypted = new RadixBase64(RadixECIES.encrypt(ephemeral.getPublic(), Buffer.from(payload)));
    }
    addUnencryptedPayload(payload) {
        // TODO: transaction message payloads are raw strings not json
        this.encrypted = new RadixBase64(Buffer.from(payload));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhQYXlsb2FkQXRvbS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2R1bGVzL2F0b20vUmFkaXhQYXlsb2FkQXRvbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLFVBQVUsTUFBTSxzQkFBc0IsQ0FBQTtBQUU3QyxPQUFPLEVBQ0gsU0FBUyxFQUNULFdBQVcsRUFDWCxjQUFjLEVBRWpCLE1BQU0sbUJBQW1CLENBQUE7QUFFMUIsT0FBTyxFQUFFLE1BQU0sVUFBVSxDQUFBO0FBRXpCLE1BQU0sRUFBRSxHQUFHLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQTtBQUVqQyxNQUFNLENBQUMsT0FBTyxPQUFnQixnQkFBaUIsU0FBUSxTQUFTO0lBSTVELFlBQVksSUFBYTtRQUNyQixLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7UUFFWCxJQUFJLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBQzlDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUE7SUFDbEQsQ0FBQztJQUVNLG1CQUFtQixDQUFDLE9BQXFCO1FBQzVDLElBQUksSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2xDLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUE7WUFFbEUsT0FBTyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUE7U0FDL0I7YUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDdkIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUE7WUFFOUMsT0FBTyxPQUFPLENBQUE7U0FDakI7UUFFRCxNQUFNLElBQUksS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFBO0lBQ2pDLENBQUM7SUFFTSxtQkFBbUIsQ0FBQyxPQUFlLEVBQUUsVUFBMEI7UUFDbEUsb0JBQW9CO1FBQ3BCLElBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQTtRQUUvQiw2QkFBNkI7UUFDN0IsSUFBSSxTQUFTLEdBQUcsSUFBSSxjQUFjLEVBQUUsQ0FBQTtRQUNwQyxTQUFTLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQTtRQUV6QixLQUFLLElBQUksU0FBUyxJQUFJLFVBQVUsRUFBRTtZQUM5QixTQUFTLENBQUMsVUFBVSxDQUFDLElBQUksQ0FDckIsSUFBSSxXQUFXLENBQ1gsVUFBVSxDQUFDLE9BQU8sQ0FDZCxTQUFTLENBQUMsU0FBUyxFQUFFLEVBQ3JCLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FDbEQsQ0FDSixDQUNKLENBQUE7U0FDSjtRQUVELElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFBO1FBRTFCLGtCQUFrQjtRQUNsQixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksV0FBVyxDQUM1QixVQUFVLENBQUMsT0FBTyxDQUNkLFNBQVMsQ0FBQyxTQUFTLEVBQUUsRUFDckIsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FDdkIsQ0FDSixDQUFBO0lBQ0wsQ0FBQztJQUVNLHFCQUFxQixDQUFDLE9BQWU7UUFDeEMsOERBQThEO1FBQzlELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxXQUFXLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFBO0lBQzFELENBQUM7Q0FDSiJ9