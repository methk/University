"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var typescript_map_1 = require("typescript-map");
var RadixAtomModel_1 = require("../RadixAtomModel");
var RadixLogger_1 = require("../common/RadixLogger");
var long_1 = tslib_1.__importDefault(require("long"));
var DataTypes;
(function (DataTypes) {
    DataTypes[DataTypes["BOOLEAN"] = 1] = "BOOLEAN";
    DataTypes[DataTypes["NUMBER"] = 2] = "NUMBER";
    DataTypes[DataTypes["STRING"] = 3] = "STRING";
    DataTypes[DataTypes["BYTES"] = 4] = "BYTES";
    DataTypes[DataTypes["OBJECT"] = 5] = "OBJECT";
    DataTypes[DataTypes["ARRAY"] = 6] = "ARRAY";
    DataTypes[DataTypes["EUID"] = 7] = "EUID";
    DataTypes[DataTypes["HASH"] = 8] = "HASH";
})(DataTypes = exports.DataTypes || (exports.DataTypes = {}));
var RadixSerializer = /** @class */ (function () {
    function RadixSerializer() {
    }
    RadixSerializer.fromJson = function (json) {
        var e_1, _a;
        if (Array.isArray(json)) {
            var output = [];
            try {
                for (var json_1 = tslib_1.__values(json), json_1_1 = json_1.next(); !json_1_1.done; json_1_1 = json_1.next()) {
                    var item = json_1_1.value;
                    output.push(RadixSerializer.fromJson(item));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (json_1_1 && !json_1_1.done && (_a = json_1.return)) _a.call(json_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return output;
        }
        else if (typeof json === 'object') {
            return RadixSerializer.fromJsonObject(json);
        }
        else {
            return json;
        }
    };
    RadixSerializer.fromJsonObject = function (jsonObject) {
        var output = {};
        for (var key in jsonObject) {
            output[key] = RadixSerializer.fromJson(jsonObject[key]);
        }
        if ('serializer' in output) {
            var type = output['serializer'];
            switch (type) {
                case RadixAtomModel_1.RadixEUID.SERIALIZER:
                    return RadixAtomModel_1.RadixEUID.fromJson(output);
                case RadixAtomModel_1.RadixHash.SERIALIZER:
                    return RadixAtomModel_1.RadixHash.fromJson(output);
                case RadixAtomModel_1.RadixBase64.SERIALIZER:
                    return RadixAtomModel_1.RadixBase64.fromJson(output);
                case RadixAtomModel_1.RadixNullAtom.SERIALIZER:
                    return new RadixAtomModel_1.RadixNullAtom(output);
                case RadixAtomModel_1.RadixNullJunk.SERIALIZER:
                    return new RadixAtomModel_1.RadixNullJunk(output);
                case RadixAtomModel_1.RadixSignature.SERIALIZER:
                    return new RadixAtomModel_1.RadixSignature(output);
                case RadixAtomModel_1.RadixBasicPayloadAtom.SERIALIZER:
                    return new RadixAtomModel_1.RadixBasicPayloadAtom(output);
                case RadixAtomModel_1.RadixApplicationPayloadAtom.SERIALIZER:
                    return new RadixAtomModel_1.RadixApplicationPayloadAtom(output);
                case RadixAtomModel_1.RadixECKeyPair.SERIALIZER:
                    return new RadixAtomModel_1.RadixECKeyPair(output);
                case RadixAtomModel_1.RadixEncryptor.SERIALIZER:
                    return new RadixAtomModel_1.RadixEncryptor(output);
                case RadixAtomModel_1.RadixTransactionAtom.SERIALIZER:
                    return new RadixAtomModel_1.RadixTransactionAtom(output);
                case RadixAtomModel_1.RadixEmission.SERIALIZER:
                    return new RadixAtomModel_1.RadixEmission(output);
                case RadixAtomModel_1.RadixConsumable.SERIALIZER:
                    return new RadixAtomModel_1.RadixConsumable(output);
                case RadixAtomModel_1.RadixConsumer.SERIALIZER:
                    return new RadixAtomModel_1.RadixConsumer(output);
                case RadixAtomModel_1.RadixTokenClass.SERIALIZER:
                    return new RadixAtomModel_1.RadixTokenClass(output);
                case RadixAtomModel_1.RadixFeeConsumable.SERIALIZER:
                    return new RadixAtomModel_1.RadixFeeConsumable(output);
                case RadixAtomModel_1.RadixAtomFeeConsumable.SERIALIZER:
                    return new RadixAtomModel_1.RadixAtomFeeConsumable(output);
                default:
                    RadixLogger_1.logger.trace("Serializer \"" + type + "\" not implemented");
                    break;
            }
        }
        return output;
    };
    RadixSerializer.toJson = function (data) {
        var e_2, _a;
        if (Array.isArray(data)) {
            var output = [];
            try {
                for (var data_1 = tslib_1.__values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
                    var item = data_1_1.value;
                    output.push(RadixSerializer.toJson(item));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
            return output;
        }
        else if (typeof data === 'string' ||
            typeof data === 'number' ||
            typeof data === 'boolean' ||
            data instanceof long_1.default) {
            return data;
        }
        else if (data !== null && typeof data === 'object') {
            if (typeof data.toJson === 'function') {
                return data.toJson();
            }
            else {
                var output = {};
                for (var key in data) {
                    var serialized = RadixSerializer.toJson(data[key]);
                    if (serialized) {
                        output[key] = serialized;
                    }
                }
                return output;
            }
        }
    };
    RadixSerializer.fromByteArray = function (bytes) {
        // Read 1 byte for type
        var type = bytes.readUInt8(0);
        // Read 4 bytes for length
        var length = bytes.readUInt32BE(1);
        // Switch on type
        switch (type) {
            case DataTypes.BOOLEAN: {
                return bytes.readUInt8(5) ? true : false;
            }
            case DataTypes.NUMBER: {
                return long_1.default.fromBytesBE(tslib_1.__spread(bytes.slice(5, 13))).toNumber();
            }
            case DataTypes.STRING: {
                return bytes.slice(5, 5 + length).toString('utf8');
            }
            case DataTypes.BYTES: {
                return new RadixAtomModel_1.RadixBase64(bytes.slice(5, 5 + length));
            }
            case DataTypes.OBJECT: {
                return this.fromObjectByteArray(bytes);
            }
            case DataTypes.ARRAY: {
                var output = [];
                var offset = 5;
                while (offset < length) {
                    // Read 2nd to 5th bytes to find out the length of the value
                    var valueLength = bytes.readUInt32BE(offset + 1);
                    output.push(this.fromByteArray(bytes.slice(offset, offset + 5 + valueLength)));
                    offset += 5 + valueLength;
                }
                return output;
            }
            case DataTypes.EUID: {
                return new RadixAtomModel_1.RadixEUID(bytes.slice(5, 5 + length));
            }
            case DataTypes.HASH: {
                return new RadixAtomModel_1.RadixHash(bytes.slice(5, 5 + length));
            }
        }
    };
    RadixSerializer.fromObjectByteArray = function (bytes) {
        // Read 4 bytes for length
        var length = bytes.readUInt32BE(1);
        var offset = 5;
        var output = {};
        while (offset < length + 5) {
            var keyLength = bytes.readUInt8(offset);
            offset++;
            var key = bytes.slice(offset, offset + keyLength).toString('utf8');
            offset += keyLength;
            // Read 2nd to 5th bytes to find out the length of the value
            var valueLength = bytes.readUInt32BE(offset + 1);
            output[key] = this.fromByteArray(bytes.slice(offset, offset + 5 + valueLength));
            offset += 5 + valueLength;
        }
        // Check if has serializer, cast
        if ('serializer' in output) {
            var type = output['serializer'];
            switch (type) {
                case RadixAtomModel_1.RadixNullAtom.SERIALIZER:
                    return new RadixAtomModel_1.RadixNullAtom(output);
                case RadixAtomModel_1.RadixNullJunk.SERIALIZER:
                    return new RadixAtomModel_1.RadixNullJunk(output);
                case RadixAtomModel_1.RadixSignature.SERIALIZER:
                    return new RadixAtomModel_1.RadixSignature(output);
                case RadixAtomModel_1.RadixBasicPayloadAtom.SERIALIZER:
                    return new RadixAtomModel_1.RadixBasicPayloadAtom(output);
                case RadixAtomModel_1.RadixECKeyPair.SERIALIZER:
                    return new RadixAtomModel_1.RadixECKeyPair(output);
                case RadixAtomModel_1.RadixEncryptor.SERIALIZER:
                    return new RadixAtomModel_1.RadixEncryptor(output);
                default:
                    RadixLogger_1.logger.trace("Serializer \"" + type + "\" not implemented");
                    break;
            }
        }
        return output;
    };
    RadixSerializer.toByteArray = function (data) {
        var e_3, _a, e_4, _b, e_5, _c;
        var output = new Buffer([]);
        if (Array.isArray(data)) {
            var type = DataTypes.ARRAY;
            var length_1 = 0;
            // Serialize all items
            var serialized = [];
            try {
                for (var data_2 = tslib_1.__values(data), data_2_1 = data_2.next(); !data_2_1.done; data_2_1 = data_2.next()) {
                    var item = data_2_1.value;
                    var serializedItem = this.toByteArray(item);
                    length_1 += serializedItem.length;
                    serialized.push(serializedItem);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (data_2_1 && !data_2_1.done && (_a = data_2.return)) _a.call(data_2);
                }
                finally { if (e_3) throw e_3.error; }
            }
            // Write everything to the buffer
            output = Buffer.alloc(length_1 + 5);
            output.writeUInt8(type, 0);
            output.writeUInt32BE(length_1, 1);
            var position = 5;
            try {
                for (var serialized_1 = tslib_1.__values(serialized), serialized_1_1 = serialized_1.next(); !serialized_1_1.done; serialized_1_1 = serialized_1.next()) {
                    var item = serialized_1_1.value;
                    item.copy(output, position);
                    position += item.length;
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (serialized_1_1 && !serialized_1_1.done && (_b = serialized_1.return)) _b.call(serialized_1);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
        else if (typeof data === 'number' || data instanceof long_1.default) {
            var type = DataTypes.NUMBER;
            var length_2 = 8;
            var bufferData = (data instanceof long_1.default) ? Buffer.from(data.toBytes()) : Buffer.from(long_1.default.fromNumber(data).toBytes());
            output = Buffer.alloc(length_2 + 5);
            output.writeUInt8(type, 0);
            output.writeUInt32BE(length_2, 1);
            bufferData.copy(output, 5);
        }
        else if (typeof data === 'object') {
            if (typeof data.toByteArray === 'function') {
                // Radix objects
                output = data.toByteArray();
            }
            else {
                // Generic object
                var type = DataTypes.OBJECT;
                var length_3 = 0;
                // Serialize all properties
                // Build a map sorted by property name
                var map = new typescript_map_1.TSMap();
                for (var key in data) {
                    var serializedValue = this.toByteArray(data[key]);
                    length_3 += key.length + 1 + serializedValue.length;
                    map.sortedSet(key, serializedValue);
                }
                // Write everything to the buffer
                output = Buffer.alloc(length_3 + 5);
                output.writeUInt8(type, 0);
                output.writeUInt32BE(length_3, 1);
                var position = 5;
                try {
                    for (var _d = tslib_1.__values(map.keys()), _e = _d.next(); !_e.done; _e = _d.next()) {
                        var key = _e.value;
                        var value = map.get(key);
                        output.writeUInt8(key.length, position);
                        position++;
                        output.write(key, position);
                        position += key.length;
                        value.copy(output, position);
                        position += value.length;
                    }
                }
                catch (e_5_1) { e_5 = { error: e_5_1 }; }
                finally {
                    try {
                        if (_e && !_e.done && (_c = _d.return)) _c.call(_d);
                    }
                    finally { if (e_5) throw e_5.error; }
                }
            }
        }
        else if (typeof data === 'boolean') {
            var type = DataTypes.BOOLEAN;
            var length_4 = 1;
            output = Buffer.alloc(length_4 + 5);
            output.writeUInt8(type, 0);
            output.writeUInt32BE(length_4, 1);
            output.writeUInt8(data ? 1 : 0, 5);
        }
        else if (typeof data === 'string') {
            var type = DataTypes.STRING;
            var bufferData = Buffer.from(data, 'utf8');
            var length_5 = bufferData.length;
            output = Buffer.alloc(length_5 + 5);
            output.writeUInt8(type, 0);
            output.writeUInt32BE(length_5, 1);
            bufferData.copy(output, 5);
        }
        else if (typeof data === 'function') {
            // Ignore
        }
        else {
            RadixLogger_1.logger.trace('Unknown type', data);
        }
        return output;
    };
    return RadixSerializer;
}());
exports.default = RadixSerializer;
//# sourceMappingURL=data:application/json;base64,