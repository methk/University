import { Subject, Observable } from 'rxjs';
import { TSMap } from 'typescript-map';
import { filter } from 'rxjs/operators';
import { RadixApplicationPayloadAtom } from '../RadixAtomModel';
export default class RadixDataAccountSystem {
    constructor(keyPair) {
        this.keyPair = keyPair;
        this.name = 'DATA';
        this.applicationDataSubject = new Subject();
        this.applicationData = new TSMap();
    }
    async processAtomUpdate(atomUpdate) {
        if (atomUpdate.atom.serializer !== RadixApplicationPayloadAtom.SERIALIZER) {
            return;
        }
        if (atomUpdate.action === 'STORE') {
            this.processStoreAtom(atomUpdate.atom);
        }
        else if (atomUpdate.action === 'DELETE') {
            this.processDeleteAtom(atomUpdate.atom);
        }
    }
    processStoreAtom(atom) {
        const applicationId = atom.applicationId;
        const hid = atom.hid.toString();
        // Skip existing atoms
        if (this.applicationData.has(applicationId) &&
            this.applicationData.get(applicationId).has(hid)) {
            return;
        }
        const applicationData = {
            hid,
            payload: '',
            timestamp: atom.timestamps.default
        };
        const applicationDataUpdate = {
            action: 'STORE',
            hid,
            applicationId,
            data: applicationData,
        };
        if (atom.payload === null) {
            return;
        }
        applicationData.payload = atom.payload;
        if (!this.applicationData.has(applicationId)) {
            this.applicationData.set(applicationId, new TSMap());
        }
        this.applicationData.get(applicationId).set(hid, applicationData);
        this.applicationDataSubject.next(applicationDataUpdate);
    }
    processDeleteAtom(atom) {
        const applicationId = atom.applicationId;
        const hid = atom.hid.toString();
        // Skip nonexisting atoms
        if (!this.applicationData.has(applicationId) ||
            !this.applicationData.get(applicationId).has(hid)) {
            return;
        }
        const applicationData = this.applicationData.get(applicationId).get(hid);
        const applicationDataUpdate = {
            action: 'DELETE',
            hid,
            applicationId,
            data: applicationData,
        };
        this.applicationData.get(applicationId).delete(hid);
        this.applicationDataSubject.next(applicationDataUpdate);
    }
    getApplicationData(applicationId) {
        return Observable.create((observer) => {
            // Send all old data
            if (this.applicationData.has(applicationId)) {
                for (const applicationData of this.applicationData
                    .get(applicationId)
                    .values()) {
                    const applicationDataUpdate = {
                        action: 'STORE',
                        hid: applicationData.hid,
                        applicationId: applicationId,
                        data: applicationData
                    };
                    observer.next(applicationDataUpdate);
                }
            }
            // Subscribe for new ones
            this.applicationDataSubject
                .pipe(filter(update => {
                return update.applicationId === applicationId;
            }))
                .subscribe(observer);
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhEYXRhQWNjb3VudFN5c3RlbS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2R1bGVzL2FjY291bnQvUmFkaXhEYXRhQWNjb3VudFN5c3RlbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBWSxNQUFNLE1BQU0sQ0FBQTtBQUNwRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZ0JBQWdCLENBQUE7QUFDdEMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFBO0FBTXZDLE9BQU8sRUFBYSwyQkFBMkIsRUFBbUIsTUFBTSxtQkFBbUIsQ0FBQTtBQUUzRixNQUFNLENBQUMsT0FBTyxPQUFPLHNCQUFzQjtJQUt2QyxZQUFxQixPQUFPO1FBQVAsWUFBTyxHQUFQLE9BQU8sQ0FBQTtRQUpyQixTQUFJLEdBQUcsTUFBTSxDQUFBO1FBQ2IsMkJBQXNCLEdBQXdDLElBQUksT0FBTyxFQUFFLENBQUE7UUFDM0Usb0JBQWUsR0FBdUQsSUFBSSxLQUFLLEVBQUUsQ0FBQTtJQUV6RCxDQUFDO0lBRXpCLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxVQUEyQjtRQUN0RCxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsVUFBVSxLQUFLLDJCQUEyQixDQUFDLFVBQVUsRUFBRTtZQUN2RSxPQUFNO1NBQ1Q7UUFFRCxJQUFJLFVBQVUsQ0FBQyxNQUFNLEtBQUssT0FBTyxFQUFFO1lBQy9CLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsSUFBbUMsQ0FBQyxDQUFBO1NBQ3hFO2FBQU0sSUFBSSxVQUFVLENBQUMsTUFBTSxLQUFLLFFBQVEsRUFBRTtZQUN2QyxJQUFJLENBQUMsaUJBQWlCLENBQUMsVUFBVSxDQUFDLElBQW1DLENBQUMsQ0FBQTtTQUN6RTtJQUNMLENBQUM7SUFFTyxnQkFBZ0IsQ0FBQyxJQUFpQztRQUN0RCxNQUFNLGFBQWEsR0FBRyxJQUFJ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