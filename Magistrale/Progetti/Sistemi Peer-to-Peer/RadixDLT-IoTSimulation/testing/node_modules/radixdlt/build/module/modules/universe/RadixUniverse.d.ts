import RadixUniverseConfig from './RadixUniverseConfig';
import RadixNodeDiscovery from './RadixNodeDiscovery';
import RadixNodeDiscoveryFromNodeFinder from './RadixNodeDiscoveryFromNodeFinder';
import RadixNodeDiscoveryFromSeed from './RadixNodeDiscoveryFromSeed';
import RadixNodeConnection from './RadixNodeConnection';
import Long from 'long';
export default class RadixUniverse {
    static ALPHANET: {
        universeConfig: RadixUniverseConfig;
        nodeDiscovery: RadixNodeDiscoveryFromNodeFinder;
        nodeRPCAddress: (nodeIp: any) => string;
    };
    static ALPHANET2: {
        universeConfig: RadixUniverseConfig;
        nodeDiscovery: RadixNodeDiscoveryFromNodeFinder;
        nodeRPCAddress: (nodeIp: any) => string;
    };
    static HIGHGARDEN: {
        universeConfig: RadixUniverseConfig;
        nodeDiscovery: RadixNodeDiscoveryFromNodeFinder;
        nodeRPCAddress: (nodeIp: any) => string;
    };
    static SUNSTONE: {
        universeConfig: RadixUniverseConfig;
        nodeDiscovery: RadixNodeDiscoveryFromNodeFinder;
        nodeRPCAddress: (nodeIp: any) => string;
    };
    static WINTERFELL: {
        universeConfig: RadixUniverseConfig;
        nodeDiscovery: RadixNodeDiscoveryFromSeed;
        nodeRPCAddress: (nodeIp: any) => string;
    };
    static WINTERFELL_LOCAL: {
        universeConfig: RadixUniverseConfig;
        nodeDiscovery: RadixNodeDiscoveryFromSeed;
        nodeRPCAddress: (nodeIp: any) => string;
    };
    initialized: boolean;
    universeConfig: RadixUniverseConfig;
    nodeDiscovery: RadixNodeDiscovery;
    nodeRPCAddress: (nodeIp: string) => string;
    private liveNodes;
    private connectedNodes;
    private lastNetworkUpdate;
    private networkUpdateInterval;
    /**
     * Bootstraps the universe with a specific configuration
     * Must be called before performing any operations
     * Use one of the predefined static configurations in this class
     * @param config
     */
    bootstrap(config: {
        universeConfig: RadixUniverseConfig;
        nodeDiscovery: RadixNodeDiscovery;
        nodeRPCAddress: (nodeIp: string) => string;
    }): void;
    /**
     * Given an IP address this function resolves a deterministic
     * DNS record in the radixnode.net domain.
     *
     * @param address IP address or hostname
     */
    static resolveNodeName(address: any): any;
    /**
     * Gets the universe magic byte, used mainly for generating an address from a public key
     * @returns
     */
    getMagicByte(): number;
    private loadPeersFromBootstrap;
    /**
     * Gets a RadixNodeConnection for a specified shard
     * Updates the node list if neccessary
     * @param shard
     * @returns node connection
     */
    getNodeConnection(shard: Long): Promise<RadixNodeConnection>;
    private openNodeConnection;
    /**
     * Close all open connections
     * Recommended to call this before quitting the application, so that nodes can close the corresponding open connections as well
     */
    closeAllConnections: () => void;
    private canNodeServiceShard;
}
export declare const radixUniverse: RadixUniverse;
