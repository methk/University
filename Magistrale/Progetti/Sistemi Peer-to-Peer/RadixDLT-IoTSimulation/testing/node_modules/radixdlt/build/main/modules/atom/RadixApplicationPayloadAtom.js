"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var RadixAtomModel_1 = require("../RadixAtomModel");
var RadixApplicationPayloadAtom = /** @class */ (function (_super) {
    tslib_1.__extends(RadixApplicationPayloadAtom, _super);
    function RadixApplicationPayloadAtom(json) {
        var _this = _super.call(this, json) || this;
        _this.serializationProperties.push('applicationId');
        return _this;
    }
    RadixApplicationPayloadAtom.withEncryptedPayload = function (payload, recipients, applicationId, encrypted) {
        var e_1, _a;
        if (encrypted === void 0) { encrypted = true; }
        var atom = new RadixApplicationPayloadAtom();
        atom.applicationId = applicationId;
        if (encrypted) {
            atom.addEncryptedPayload(payload, recipients);
        }
        else {
            atom.addUnencryptedPayload(payload);
        }
        // Destinations
        atom.destinations = [];
        try {
            for (var recipients_1 = tslib_1.__values(recipients), recipients_1_1 = recipients_1.next(); !recipients_1_1.done; recipients_1_1 = recipients_1.next()) {
                var recipient = recipients_1_1.value;
                atom.destinations.push(recipient.getUID());
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (recipients_1_1 && !recipients_1_1.done && (_a = recipients_1.return)) _a.call(recipients_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        // Action
        atom.action = 'STORE';
        atom.timestamps = { default: Date.now() };
        return atom;
    };
    RadixApplicationPayloadAtom.SERIALIZER = -2040291185;
    return RadixApplicationPayloadAtom;
}(RadixAtomModel_1.RadixPayloadAtom));
exports.default = RadixApplicationPayloadAtom;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhBcHBsaWNhdGlvblBheWxvYWRBdG9tLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL21vZHVsZXMvYXRvbS9SYWRpeEFwcGxpY2F0aW9uUGF5bG9hZEF0b20udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsb0RBQWtFO0FBRWxFO0lBQXlELHVEQUFnQjtJQUtyRSxxQ0FBWSxJQUFhO1FBQXpCLFlBQ0ksa0JBQU0sSUFBSSxDQUFDLFNBR2Q7UUFERyxLQUFJLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFBOztJQUN0RCxDQUFDO0lBRWEsZ0RBQW9CLEdBQWxDLFVBQ0ksT0FBZSxFQUNmLFVBQTBCLEVBQzFCLGFBQXFCLEVBQ3JCLFNBQWdCOztRQUFoQiwwQkFBQSxFQUFBLGdCQUFnQjtRQUVoQixJQUFJLElBQUksR0FBRyxJQUFJLDJCQUEyQixFQUFFLENBQUE7UUFDNUMsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUE7UUFFbEMsSUFBSSxTQUFTLEVBQUU7WUFDWCxJQUFJLENBQUMsbUJBQW1CLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFBO1NBQ2hEO2FBQU07WUFDSCxJQUFJLENBQUMscUJBQXFCLENBQUMsT0FBTyxDQUFDLENBQUE7U0FDdEM7UUFFRCxlQUFlO1FBQ2YsSUFBSSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUE7O1lBQ3RCLEtBQXNCLElBQUEsZUFBQSxpQkFBQSxVQUFVLENBQUEsc0NBQUEsOERBQUU7Z0JBQTdCLElBQUksU0FBUyx1QkFBQTtnQkFDZCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQTthQUM3Qzs7Ozs7Ozs7O1FBRUQsU0FBUztRQUNULElBQUksQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFBO1FBQ3JCLElBQUksQ0FBQyxVQUFVLEdBQUcsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUE7UUFFekMsT0FBTyxJQUFJLENBQUE7SUFDZixDQUFDO0lBcENhLHNDQUFVLEdBQUcsQ0FBQyxVQUFVLENBQUE7SUFxQzFDLGtDQUFDO0NBQUEsQUF0Q0QsQ0FBeUQsaUNBQWdCLEdBc0N4RTtrQkF0Q29CLDJCQUEyQiJ9