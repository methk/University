import { RadixTokenClass, RadixSerializer } from '../RadixAtomModel';
import { radixUniverse } from '../..';
/**
 * Tokens' information manager.
 */
export class RadixTokenManager {
    constructor() {
        this.tokens = {};
    }
    initialize() {
        for (const atom of radixUniverse.universeConfig.genesis) {
            if (atom.serializer === RadixTokenClass.SERIALIZER) {
                this.addOrUpdateToken(RadixSerializer.fromJson(atom));
            }
        }
    }
    /**
     * Add or update a token, indexed by its ID.
     *
     * @param {RadixTokenClass} token
     * @memberof RadixToken
     */
    addOrUpdateToken(token) {
        this.tokens[token.id.toString()] = token;
    }
    /**
     * Get a token by ID, if it doesn't exists it searches for it in the Ledger.
     *
     * @param {string} id
     * @returns {RadixTokenClass}
     * @memberof RadixToken
     */
    getTokenByID(id) {
        const token = this.tokens[id];
        if (!token) {
            // Search token by id in Ledger?
        }
        return token;
    }
    /**
     * Get a token by ISO, if it doesn't exists it searches for it in the Ledger.
     *
     * @param {string} iso
     * @returns {RadixTokenClass}
     * @memberof RadixToken
     */
    getTokenByISO(iso) {
        for (const token of Object.values(this.tokens)) {
            if (token.iso === iso) {
                return token;
            }
        }
        // Search token by iso in Ledger?
        return null;
    }
    /**
     * Return a list of the current tokens in the manager.
     *
     * @returns
     * @memberof RadixToken
     */
    getCurrentTokens() {
        return this.tokens;
    }
}
export let radixTokenManager = new RadixTokenManager();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhUb2tlbk1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbW9kdWxlcy90b2tlbi9SYWRpeFRva2VuTWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBRSxNQUFNLG1CQUFtQixDQUFBO0FBQ3BFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxPQUFPLENBQUE7QUFFckM7O0dBRUc7QUFDSCxNQUFNLE9BQU8saUJBQWlCO0lBQTlCO1FBQ1csV0FBTSxHQUFzQyxFQUFFLENBQUE7SUFpRXpELENBQUM7SUEvRFUsVUFBVTtRQUNiLEtBQUssTUFBTSxJQUFJLElBQUksYUFBYSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUU7WUFDckQsSUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLGVBQWUsQ0FBQyxVQUFVLEVBQUU7Z0JBQ2hELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7YUFDeEQ7U0FDSjtJQUNMLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLGdCQUFnQixDQUFDLEtBQXNCO1FBQzFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQTtJQUM1QyxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0ksWUFBWSxDQUFDLEVBQVU7UUFDMUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUU3QixJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1IsZ0NBQWdDO1NBQ25DO1FBRUQsT0FBTyxLQUFLLENBQUE7SUFDaEIsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNJLGFBQWEsQ0FBQyxHQUFXO1FBQzVCLEtBQUssTUFBTSxLQUFLLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDNUMsSUFBSSxLQUFLLENBQUMsR0FBRyxLQUFLLEdBQUcsRUFBRTtnQkFDbkIsT0FBTyxLQUFLLENBQUE7YUFDZjtTQUNKO1FBRUQsaUNBQWlDO1FBRWpDLE9BQU8sSUFBSSxDQUFBO0lBQ2YsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksZ0JBQWdCO1FBQ25CLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQTtJQUN0QixDQUFDO0NBQ0o7QUFFRCxNQUFNLENBQUMsSUFBSSxpQkFBaUIsR0FBRyxJQUFJLGlCQUFpQixFQUFFLENBQUEifQ==