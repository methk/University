"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var RadixPOWTask_1 = tslib_1.__importDefault(require("../pow/RadixPOWTask"));
var RadixUtil_1 = tslib_1.__importDefault(require("../common/RadixUtil"));
var RadixAtomModel_1 = require("../RadixAtomModel");
var RadixFeeProvider = /** @class */ (function () {
    function RadixFeeProvider() {
    }
    RadixFeeProvider.generatePOWFee = function (magic, token, atom, endorsee) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var endorseePublicKey, target, seed, powTask, pow, feeConsumable;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        endorseePublicKey = endorsee.node.system.key.data;
                        target = RadixUtil_1.default.powTargetFromAtomSize(atom.getSize());
                        seed = atom.getHash();
                        powTask = new RadixPOWTask_1.default(magic, seed, target);
                        return [4 /*yield*/, powTask.computePow()
                            // Make AtomFeeConsumable
                        ];
                    case 1:
                        pow = _a.sent();
                        feeConsumable = new RadixAtomModel_1.RadixAtomFeeConsumable();
                        // Token
                        feeConsumable.asset_id = token.id;
                        feeConsumable.quantity = pow.nonce.toNumber();
                        feeConsumable.nonce = Date.now();
                        feeConsumable.owners = [
                            RadixAtomModel_1.RadixECKeyPair.fromRadixKeyPair(RadixAtomModel_1.RadixKeyPair.fromPublic(endorseePublicKey))
                        ];
                        return [2 /*return*/, feeConsumable];
                }
            });
        });
    };
    return RadixFeeProvider;
}());
exports.default = RadixFeeProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhGZWVQcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2R1bGVzL2ZlZXMvUmFkaXhGZWVQcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSw2RUFBOEM7QUFDOUMsMEVBQTJDO0FBRTNDLG9EQU0wQjtBQUUxQjtJQUFBO0lBa0NBLENBQUM7SUFqQ3VCLCtCQUFjLEdBQWxDLFVBQ0ksS0FBYSxFQUNiLEtBQXNCLEVBQ3RCLElBQWUsRUFDZixRQUE2Qjs7Ozs7O3dCQUV2QixpQkFBaUIsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFBO3dCQUdqRCxNQUFNLEdBQUcsbUJBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQTt3QkFHeEQsSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQTt3QkFHckIsT0FBTyxHQUFHLElBQUksc0JBQVksQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFBO3dCQUN6QyxxQkFBTSxPQUFPLENBQUMsVUFBVSxFQUFFOzRCQUV0Qyx5QkFBeUI7MEJBRmE7O3dCQUFoQyxHQUFHLEdBQUcsU0FBMEI7d0JBR2hDLGFBQWEsR0FBRyxJQUFJLHVDQUFzQixFQUFFLENBQUE7d0JBRWxELFFBQVE7d0JBQ1IsYUFBYSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFBO3dCQUNqQyxhQUFhLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUE7d0JBQzdDLGFBQWEsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFBO3dCQUNoQyxhQUFhLENBQUMsTUFBTSxHQUFHOzRCQUNuQiwrQkFBYyxDQUFDLGdCQUFnQixDQUMzQiw2QkFBWSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUM3Qzt5QkFDSixDQUFBO3dCQUVELHNCQUFPLGFBQWEsRUFBQTs7OztLQUN2QjtJQUNMLHVCQUFDO0FBQUQsQ0FBQyxBQWxDRCxJQWtDQyJ9