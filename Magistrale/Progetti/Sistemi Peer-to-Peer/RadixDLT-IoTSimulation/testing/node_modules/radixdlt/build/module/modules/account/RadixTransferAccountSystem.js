import { Subject, Observable, BehaviorSubject } from 'rxjs';
import { TSMap } from 'typescript-map';
import RadixKeyPair from '../wallet/RadixKeyPair';
import { radixTokenManager } from '../token/RadixTokenManager';
import { radixConfig } from '../common/RadixConfig';
import { RadixTransactionAtom, RadixConsumer, RadixConsumable, RadixEmission, RadixAtomFeeConsumable } from '../RadixAtomModel';
export default class RadixTransferAccountSystem {
    constructor(keyPair) {
        this.keyPair = keyPair;
        this.name = 'TRANSFER';
        this.transactions = new TSMap();
        this.balance = {};
        this.transactionSubject = new Subject();
        this.unspentConsumables = new TSMap();
        this.spentConsumables = new TSMap();
        // Add default radix token to balance
        this.balance[radixTokenManager.getTokenByISO(radixConfig.mainTokenISO).id.toString()] = 0;
        this.balanceSubject = new BehaviorSubject(this.balance);
    }
    async processAtomUpdate(atomUpdate) {
        const atom = atomUpdate.atom;
        if (atom.serializer !== RadixTransactionAtom.SERIALIZER) {
            return;
        }
        if (atomUpdate.action === 'STORE') {
            this.processStoreAtom(atom);
        }
        else if (atomUpdate.action === 'DELETE') {
            this.processDeleteAtom(atom);
        }
    }
    processStoreAtom(atom) {
        // Skip existing atoms
        if (this.transactions.has(atom.hid.toString())) {
            return;
        }
        const transactionUpdate = {
            action: 'STORE',
            hid: atom.hid.toString(),
            transaction: {
                hid: atom.hid.toString(),
                balance: {},
                fee: 0,
                participants: {},
                timestamp: atom.timestamps.default,
                message: ''
            }
        };
        const transaction = transactionUpdate.transaction;
        // Get transaction message
        if (typeof atom.payload === 'string') {
            transaction.message = atom.payload;
        }
        // Get transaction details
        for (const particle of atom.particles) {
            const tokenId = particle.asset_id.toString();
            if (!radixTokenManager.getTokenByID(tokenId)) {
                throw new Error('Unsuporeted Token Class');
            }
            let ownedByMe = false;
            for (const owner of particle.owners) {
                if (owner.public.data.equals(this.keyPair.getPublic())) {
                    ownedByMe = true;
                    break;
                }
            }
            const isFee = particle.serializer === RadixAtomFeeConsumable.SERIALIZER;
            if (ownedByMe && !isFee) {
                let quantity = 0;
                if (particle.serializer === RadixConsumer.SERIALIZER) {
                    quantity -= particle.quantity;
                    this.unspentConsumables.delete(particle._id);
                    this.spentConsumables.set(particle._id, particle);
                }
                else if (particle.serializer === RadixConsumable.SERIALIZER ||
                    particle.serializer === RadixEmission.SERIALIZER) {
                    quantity += particle.quantity;
                    if (!this.spentConsumables.has(particle._id)) {
                        this.unspentConsumables.set(particle._id, particle);
                    }
                }
                if (!(tokenId in transaction.balance)) {
                    transaction.balance[tokenId] = 0;
                }
                transaction.balance[tokenId] += quantity;
            }
            else if (!ownedByMe && !isFee) {
                for (const owner of particle.owners) {
                    const keyPair = RadixKeyPair.fromRadixECKeyPair(owner);
                    transaction.participants[keyPair.getAddress()] = keyPair.getAddress();
                }
            }
        }
        this.transactions.set(transactionUpdate.hid, transaction);
        // Update balance
        for (const tokenId in transaction.balance) {
            if (!(tokenId in this.balance)) {
                this.balance[tokenId] = 0;
            }
            this.balance[tokenId] += transaction.balance[tokenId];
        }
        this.balanceSubject.next(this.balance);
        this.transactionSubject.next(transactionUpdate);
    }
    processDeleteAtom(atom) {
        // Skip nonexisting atoms
        if (!this.transactions.has(atom.hid.toString())) {
            return;
        }
        const hid = atom.hid.toString();
        const transaction = this.transactions.get(hid);
        const transactionUpdate = {
            action: 'DELETE',
            hid,
            transaction,
        };
        // Update consumables
        for (const particle of atom.particles) {
            const tokenId = particle.asset_id.toString();
            if (!radixTokenManager.getCurrentTokens()[tokenId]) {
                throw new Error('Unsuporeted Token Class');
            }
            let ownedByMe = false;
            for (const owner of particle.owners) {
                if (owner.public.data.equals(this.keyPair.getPublic())) {
                    ownedByMe = true;
                    break;
                }
            }
            const isFee = particle.serializer === RadixAtomFeeConsumable.SERIALIZER;
            if (ownedByMe && !isFee) {
                if (particle.serializer === RadixConsumer.SERIALIZER) {
                    this.unspentConsumables.set(particle._id, particle);
                    this.spentConsumables.delete(particle._id);
                }
                else if (particle.serializer === RadixConsumable.SERIALIZER ||
                    particle.serializer === RadixEmission.SERIALIZER) {
                    this.unspentConsumables.delete(particle._id);
                }
            }
        }
        // Update balance
        for (const tokenId in transaction.balance) {
            if (!(tokenId in this.balance)) {
                this.balance[tokenId] = 0;
            }
            this.balance[tokenId] -= transaction.balance[tokenId];
        }
        this.balanceSubject.next(this.balance);
        this.transactionSubject.next(transactionUpdate);
    }
    getAllTransactions() {
        return Observable.create((observer) => {
            // Send all old transactions
            for (const transaction of this.transactions.values()) {
                const transactionUpdate = {
                    action: 'STORE',
                    hid: transaction.hid,
                    transaction: transaction
                };
                observer.next(transactionUpdate);
            }
            // Subscribe for new ones
            this.transactionSubject.subscribe(observer);
        });
    }
    getUnspentConsumables() {
        return this.unspentConsumables;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhUcmFuc2ZlckFjY291bnRTeXN0ZW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbW9kdWxlcy9hY2NvdW50L1JhZGl4VHJhbnNmZXJBY2NvdW50U3lzdGVtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFZLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQTtBQUNyRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZ0JBQWdCLENBQUE7QUFLdEMsT0FBTyxZQUFZLE1BQU0sd0JBQXdCLENBQUE7QUFFakQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sNEJBQTRCLENBQUE7QUFDOUQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHVCQUF1QixDQUFBO0FBQ25ELE9BQU8sRUFFSCxvQkFBb0IsRUFDcEIsYUFBYSxFQUNiLGVBQWUsRUFDZixhQUFhLEVBRWIsc0JBQXNCLEVBRXpCLE1BQU0sbUJBQW1CLENBQUE7QUFFMUIsTUFBTSxDQUFDLE9BQU8sT0FBTywwQkFBMEI7SUFZM0MsWUFBcUIsT0FBcUI7UUFBckIsWUFBTyxHQUFQLE9BQU8sQ0FBYztRQVhuQyxTQUFJLEdBQUcsVUFBVSxDQUFBO1FBRWpCLGlCQUFZLEdBQW9DLElBQUksS0FBSyxFQUFFLENBQUE7UUFDM0QsWUFBTyxHQUFrQyxFQUFFLENBQUE7UUFFM0MsdUJBQWtCLEdBQW9DLElBQUksT0FBTyxFQUFFLENBQUE7UUFHbEUsdUJBQWtCLEdBQWlDLElBQUksS0FBSyxFQUFFLENBQUE7UUFDOUQscUJBQWdCLEdBQWlDLElBQUksS0FBSyxFQUFFLENBQUE7UUFHaEUscUNBQXFDO1FBQ3JDLElBQUksQ0FBQyxPQUFPLENBQ1IsaUJBQWlCLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQzFFLEdBQUcsQ0FBQyxDQUFBO1FBQ0wsSUFB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