"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var nedb_1 = tslib_1.__importDefault(require("nedb"));
var RadixAtomModel_1 = require("../RadixAtomModel");
var RadixLogger_1 = require("../common/RadixLogger");
var RadixNEDBAtomCache = /** @class */ (function () {
    /**
     * Creates an instance of radix nedbatom cache.
     * @param filename File path on disk in Node, path in localStorage in the browser
     */
    function RadixNEDBAtomCache(filename) {
        var _this = this;
        this.storeAtom = function (atom) {
            return _this.notExists({ _id: atom._id })
                .then(function () {
                // logger.info('Atom doesnt exist, storing ', atom._id, atom)
                // Add particle ids?
                // Serialize
                var serializedAtom = atom.toJson();
                serializedAtom['_id'] = atom._id;
                // logger.info(serializedAtom)
                // Store
                return _this.insert(serializedAtom);
            })
                .then(function (newDoc) {
                // Success
                // logger.info('Atom stored in DB', newDoc)
                return atom;
            })
                .catch(function (error) {
                RadixLogger_1.logger.trace('Atom already in DB');
            });
        };
        this.getAtoms = function (keyPair) {
            // Find
            var query = {};
            // Filter by destination
            if (keyPair) {
                var destination = keyPair.getUID().toJson();
                query = { destinations: destination };
            }
            // logger.info(query)
            return _this.find(query).then(function (atoms) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                var deserialized, atoms_1, atoms_1_1, atom, _a, _b, e_1_1;
                var e_1, _c;
                return tslib_1.__generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            deserialized = [];
                            _d.label = 1;
                        case 1:
                            _d.trys.push([1, 6, 7, 8]);
                            atoms_1 = tslib_1.__values(atoms), atoms_1_1 = atoms_1.next();
                            _d.label = 2;
                        case 2:
                            if (!!atoms_1_1.done) return [3 /*break*/, 5];
                            atom = atoms_1_1.value;
                            _b = (_a = deserialized).push;
                            return [4 /*yield*/, this.asyncDeserialize(atom)];
                        case 3:
                            _b.apply(_a, [_d.sent()]);
                            _d.label = 4;
                        case 4:
                            atoms_1_1 = atoms_1.next();
                            return [3 /*break*/, 2];
                        case 5: return [3 /*break*/, 8];
                        case 6:
                            e_1_1 = _d.sent();
                            e_1 = { error: e_1_1 };
                            return [3 /*break*/, 8];
                        case 7:
                            try {
                                if (atoms_1_1 && !atoms_1_1.done && (_c = atoms_1.return)) _c.call(atoms_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                            return [7 /*endfinally*/];
                        case 8: return [2 /*return*/, deserialized];
                    }
                });
            }); });
        };
        // Promise wrappers for nedb
        this.findOne = function (opt) {
            return new Promise(function (resolve, reject) {
                _this.db.findOne(opt, function (error, doc) {
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve(doc);
                    }
                });
            });
        };
        this.notExists = function (opt) {
            return new Promise(function (resolve, reject) {
                _this.db.findOne(opt, function (error, doc) {
                    if (error) {
                        reject(error);
                    }
                    else if (!doc) {
                        resolve(true);
                    }
                    reject('Atom already in db');
                });
            });
        };
        this.find = function (opt) {
            return new Promise(function (resolve, reject) {
                _this.db.find(opt, function (error, doc) {
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve(doc);
                    }
                });
            });
        };
        this.insert = function (opt) {
            return new Promise(function (resolve, reject) {
                _this.db.insert(opt, function (error, doc) {
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve(doc);
                    }
                });
            });
        };
        this.remove = function (opt) {
            return new Promise(function (resolve, reject) {
                _this.db.remove(opt, function (error, doc) {
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve(doc);
                    }
                });
            });
        };
        this.db = new nedb_1.default({
            filename: filename,
            autoload: true,
        });
    }
    /**
     * Clears all atoms from the cache
     */
    RadixNEDBAtomCache.prototype.reset = function () {
        this.db.remove({}, { multi: true }, function (error, numRemoved) {
            // Do nothing
        });
    };
    RadixNEDBAtomCache.prototype.asyncDeserialize = function (atom) {
        return new Promise(function (resolve, reject) {
            setTimeout(function () {
                resolve(RadixAtomModel_1.RadixSerializer.fromJson(atom));
            }, 0);
        });
    };
    RadixNEDBAtomCache.prototype.deleteAtom = function (atom) {
        return this.remove({ _id: atom._id });
    };
    return RadixNEDBAtomCache;
}());
exports.default = RadixNEDBAtomCache;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhORURCQXRvbUNhY2hlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL21vZHVsZXMvY2FjaGUvUmFkaXhORURCQXRvbUNhY2hlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHNEQUE0QjtBQUk1QixvREFBNEU7QUFDNUUscURBQThDO0FBRTlDO0lBR0k7OztPQUdHO0lBQ0gsNEJBQVksUUFBZ0I7UUFBNUIsaUJBS0M7UUFXTSxjQUFTLEdBQUcsVUFBQyxJQUFlO1lBQy9CLE9BQU8sS0FBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7aUJBQ25DLElBQUksQ0FBQztnQkFDRiw2REFBNkQ7Z0JBQzdELG9CQUFvQjtnQkFFcEIsWUFBWTtnQkFDWixJQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUE7Z0JBQ3BDLGNBQWMsQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFBO2dCQUNoQyw4QkFBOEI7Z0JBRTlCLFFBQVE7Z0JBQ1IsT0FBTyxLQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFBO1lBQ3RDLENBQUMsQ0FBQztpQkFDRCxJQUFJLENBQUMsVUFBQyxNQUFXO2dCQUNkLFVBQVU7Z0JBQ1YsMkNBQTJDO2dCQUUzQyxPQUFPLElBQUksQ0FBQTtZQUNmLENBQUMsQ0FBQztpQkFDRCxLQUFLLENBQUMsVUFBQSxLQUFLO2dCQUNSLG9CQUFNLENBQUMsS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUE7WUFDdEMsQ0FBQyxDQUFDLENBQUE7UUFDVixDQUFDLENBQUE7UUFFTSxhQUFRLEdBQUcsVUFBQyxPQUFzQjtZQUNyQyxPQUFPO1lBQ1AsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFBO1lBRWQsd0JBQXdCO1lBQ3hCLElBQUksT0FBTyxFQUFFO2dCQUNULElBQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxN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