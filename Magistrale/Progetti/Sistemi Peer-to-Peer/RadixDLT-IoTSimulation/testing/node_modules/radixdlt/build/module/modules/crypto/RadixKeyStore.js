import RadixUtil from '../common/RadixUtil';
import { RadixKeyPair } from '../RadixAtomModel';
import crypto from 'crypto';
export default class RadixKeyStore {
    /**
     * Encrypt a private key
     * @param keyPair
     * @param password
     * @returns
     */
    static encryptKey(keyPair, password) {
        return new Promise((resolve, reject) => {
            const privateKey = keyPair.keyPair.getPrivate('hex');
            // Derrive key
            const salt = crypto.randomBytes(32).toString('hex');
            const iterations = 100000;
            const keylen = 32;
            const digest = 'sha512';
            crypto.pbkdf2(password, salt, iterations, keylen, digest, (error, derivedKey) => {
                if (error) {
                    reject(error);
                }
                // Encrypt private keys with derrived key
                const algorithm = 'aes-256-ctr';
                const iv = crypto.randomBytes(16);
                const cipher = crypto.createCipheriv(algorithm, derivedKey, iv);
                const ciphertext = Buffer.concat([
                    cipher.update(privateKey),
                    cipher.final(),
                ]);
                // Compute MAC
                const mac = this.calculateMac(derivedKey, ciphertext);
                const fileContents = {
                    crypto: {
                        cipher: algorithm,
                        cipherparams: {
                            iv: iv.toString('hex'),
                        },
                        ciphertext: ciphertext.toString('hex'),
                        pbkdfparams: {
                            iterations,
                            keylen,
                            digest,
                            salt,
                        },
                        mac: mac.toString('hex'),
                    },
                    id: keyPair.getUID().toString(),
                };
                resolve(fileContents);
            });
        });
    }
    /**
     * Decrypts an encrypted private key
     * @param fileContents
     * @param password
     * @returns key
     */
    static decryptKey(fileContents, password) {
        return new Promise((resolve, reject) => {
            // Derrive key
            const salt = fileContents.crypto.pbkdfparams.salt;
            const iterations = fileContents.crypto.pbkdfparams.iterations;
            const keylen = fileContents.crypto.pbkdfparams.keylen;
            const digest = fileContents.crypto.pbkdfparams.digest;
            crypto.pbkdf2(password, salt, iterations, keylen, digest, (error, derivedKey) => {
                if (error) {
                    return reject(error);
                }
                // Decrypt ciphertext
                const algorithm = fileContents.crypto.cipher;
                const iv = Buffer.from(fileContents.crypto.cipherparams.iv, 'hex');
                const ciphertext = Buffer.from(fileContents.crypto.ciphertext, 'hex');
                // Check MAC
                const mac = Buffer.from(fileContents.crypto.mac, 'hex');
                const computedMac = this.calculateMac(derivedKey, ciphertext);
                if (!computedMac.equals(mac)) {
                    return reject('MAC mismatch');
                }
                const decipher = crypto.createDecipheriv(algorithm, derivedKey, iv);
                const privateKey = Buffer.concat([
                    decipher.update(ciphertext),
                    decipher.final(),
                ]).toString();
                // Create wallet
                const keyPair = RadixKeyPair.fromPrivate(privateKey);
                return resolve(keyPair);
            });
        });
    }
    static calculateMac(derivedKey, ciphertext) {
        const dataToMac = Buffer.concat([derivedKey, ciphertext]);
        return RadixUtil.hash(dataToMac);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhLZXlTdG9yZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2R1bGVzL2NyeXB0by9SYWRpeEtleVN0b3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sU0FBUyxNQUFNLHFCQUFxQixDQUFBO0FBRTNDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUNoRCxPQUFPLE1BQU0sTUFBTSxRQUFRLENBQUE7QUFFM0IsTUFBTSxDQUFDLE9BQU8sT0FBTyxhQUFhO0lBRTlCOzs7OztPQUtHO0lBQ0ksTUFBTSxDQUFDLFVBQVUsQ0FBQyxPQUFxQixFQUFFLFFBQWdCO1FBQzVELE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDbkMsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUE7WUFFcEQsY0FBYztZQUNkLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFBO1lBQ25ELE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQTtZQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUE7WUFDakIsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFBO1lBRXZCLE1BQU0sQ0FBQyxNQUFNLENBQ1QsUUFBUSxFQUNSLElBQUksRUFDSixVQUFVLEVBQ1YsTUFBTSxFQUNOLE1BQU0sRUFDTixDQUFDLEtBQUssRUFBRSxVQUFVLEVBQUUsRUFBRTtnQkFDbEIsSUFBSSxLQUFLLEVBQUU7b0JBQ1AsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFBO2lCQUNoQjtnQkFFRCx5Q0FBeUM7Z0JBQ3pDLE1BQU0sU0FBUyxHQUFHLGFBQWEsQ0FBQTtnQkFDL0IsTUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENB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