"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var RadixECIES_1 = tslib_1.__importDefault(require("../crypto/RadixECIES"));
var RadixAtomModel_1 = require("../RadixAtomModel");
var elliptic_1 = tslib_1.__importDefault(require("elliptic"));
var ec = new elliptic_1.default.ec('secp256k1');
var RadixPayloadAtom = /** @class */ (function (_super) {
    tslib_1.__extends(RadixPayloadAtom, _super);
    function RadixPayloadAtom(json) {
        var _this = _super.call(this, json) || this;
        _this.serializationProperties.push('encrypted');
        _this.serializationProperties.push('encryptor');
        return _this;
    }
    RadixPayloadAtom.prototype.getDecryptedPayload = function (keyPair) {
        if (this.encrypted && this.encryptor) {
            var rawPayload = this.encryptor.decrypt(this.encrypted, keyPair);
            return rawPayload.toString();
        }
        else if (this.encrypted) {
            var payload = this.encrypted.data.toString();
            return payload;
        }
        throw new Error('No payload');
    };
    RadixPayloadAtom.prototype.addEncryptedPayload = function (payload, recipients) {
        var e_1, _a;
        // Generate key pair
        var ephemeral = ec.genKeyPair();
        // Encrypt key with receivers
        var encryptor = new RadixAtomModel_1.RadixEncryptor();
        encryptor.protectors = [];
        try {
            for (var recipients_1 = tslib_1.__values(recipients), recipients_1_1 = recipients_1.next(); !recipients_1_1.done; recipients_1_1 = recipients_1.next()) {
                var recipient = recipients_1_1.value;
                encryptor.protectors.push(new RadixAtomModel_1.RadixBase64(RadixECIES_1.default.encrypt(recipient.getPublic(), Buffer.from(ephemeral.getPrivate('hex'), 'hex'))));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (recipients_1_1 && !recipients_1_1.done && (_a = recipients_1.return)) _a.call(recipients_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.encryptor = encryptor;
        // Encrypt message
        this.encrypted = new RadixAtomModel_1.RadixBase64(RadixECIES_1.default.encrypt(ephemeral.getPublic(), Buffer.from(payload)));
    };
    RadixPayloadAtom.prototype.addUnencryptedPayload = function (payload) {
        // TODO: transaction message payloads are raw strings not json
        this.encrypted = new RadixAtomModel_1.RadixBase64(Buffer.from(payload));
    };
    return RadixPayloadAtom;
}(RadixAtomModel_1.RadixAtom));
exports.default = RadixPayloadAtom;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhQYXlsb2FkQXRvbS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2R1bGVzL2F0b20vUmFkaXhQYXlsb2FkQXRvbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw0RUFBNkM7QUFFN0Msb0RBSzBCO0FBRTFCLDhEQUF5QjtBQUV6QixJQUFNLEVBQUUsR0FBRyxJQUFJLGtCQUFFLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFBO0FBRWpDO0lBQXVELDRDQUFTO0lBSTVELDBCQUFZLElBQWE7UUFBekIsWUFDSSxrQkFBTSxJQUFJLENBQUMsU0FJZDtRQUZHLEtBQUksQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUE7UUFDOUMsS0FBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQTs7SUFDbEQsQ0FBQztJQUVNLDhDQUFtQixHQUExQixVQUEyQixPQUFxQjtRQUM1QyxJQUFJLElBQUksQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNsQyxJQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFBO1lBRWxFLE9BQU8sVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFBO1NBQy9CO2FBQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ3ZCLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFBO1lBRTlDLE9BQU8sT0FBTyxDQUFBO1NBQ2pCO1FBRUQsTUFBTSxJQUFJLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQTtJQUNqQyxDQUFDO0lBRU0sOENBQW1CLEdBQTFCLFVBQTJCLE9BQWUsRUFBRSxVQUEwQjs7UUFDbEUsb0JBQW9CO1FBQ3BCLElBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQTtRQUUvQiw2QkFBNkI7UUFDN0IsSUFBSSxTQUFTLEdBQUcsSUFBSSwrQkFBYyxFQUFFLENBQUE7UUFDcEMsU0FBUyxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUE7O1lBRXpCLEtBQXNCLElBQUEsZUFBQSxpQkFBQSxVQUFVLENBQUEsc0NBQUEsOERBQUU7Z0JBQTdCLElBQUksU0FBUyx1QkFBQTtnQkFDZCxTQUFTLENBQUMsVUFBVSxDQUFDLElBQUksQ0FDckIsSUFBSSw0QkFBVyxDQUNYLG9CQUFVLENBQUMsT0FBTyxDQUNkLFNBQVMsQ0FBQyxTQUFTLEVBQUUsRUFDckIsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUNsRCxDQUNKLENBQ0osQ0FBQTthQUNKOzs7Ozs7Ozs7UUFFRCxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQTtRQUUxQixrQkFBa0I7UUFDbEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLDRCQUFXLENBQzVCLG9CQUFVLENBQUMsT0FBTyxDQUNkLFNBQVMsQ0FBQyxTQUFTLEVBQUUsRUFDckIsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FDdkIsQ0FDSixDQUFBO0lBQ0wsQ0FBQztJQUVNLGdEQUFxQixHQUE1QixVQUE2QixPQUFlO1FBQ3hDLDhEQUE4RDtRQUM5RCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksNEJBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUE7SUFDMUQsQ0FBQztJQUNMLHVCQUFDO0FBQUQsQ0FBQyxBQTNERCxDQUF1RCwwQkFBUyxHQTJEL0QifQ==