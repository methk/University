"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var rxjs_1 = require("rxjs");
var typescript_map_1 = require("typescript-map");
var RadixKeyPair_1 = tslib_1.__importDefault(require("../wallet/RadixKeyPair"));
var RadixDataAccountSystem_1 = tslib_1.__importDefault(require("./RadixDataAccountSystem"));
var RadixUniverse_1 = require("../universe/RadixUniverse");
var __1 = require("../..");
var RadixLogger_1 = require("../common/RadixLogger");
var RadixAccount = /** @class */ (function () {
    /**
     * Creates an instance of radix account.
     * @param keyPair Public key of the account
     * @param [plain] If set to false, will not create default account systems.
     * Use this for accounts that will not be connected to the network
     */
    function RadixAccount(keyPair, plain) {
        var _this = this;
        if (plain === void 0) { plain = false; }
        this.keyPair = keyPair;
        this.accountSystems = new typescript_map_1.TSMap();
        this.connectionStatus = new rxjs_1.BehaviorSubject('STARTING');
        this.openNodeConnection = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var _a, error_1;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.connectionStatus.next('CONNECTING');
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        _a = this;
                        return [4 /*yield*/, RadixUniverse_1.radixUniverse.getNodeConnection(this.keyPair.getShard())];
                    case 2:
                        _a.nodeConnection = _b.sent();
                        this.connectionStatus.next('CONNECTED');
                        this.nodeConnection.on('closed', this._onConnectionClosed);
                        // Subscribe to events
                        this.atomSubscription = this.nodeConnection.subscribe(this.keyPair.toString());
                        this.atomSubscription.subscribe({
                            next: this._onAtomReceived,
                            error: function (error) { return RadixLogger_1.logger.error('Subscription error:', error); }
                        });
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _b.sent();
                        RadixLogger_1.logger.error(error_1);
                        setTimeout(this._onConnectionClosed, 1000);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); };
        this._onAtomReceived = function (atomUpdate) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var _a, _b, system, e_1_1;
            var e_1, _c;
            return tslib_1.__generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, 5, 6, 7]);
                        _a = tslib_1.__values(this.accountSystems.values()), _b = _a.next();
                        _d.label = 1;
                    case 1:
                        if (!!_b.done) return [3 /*break*/, 4];
                        system = _b.value;
                        return [4 /*yield*/, system.processAtomUpdate(atomUpdate)];
                    case 2:
                        _d.sent();
                        _d.label = 3;
                    case 3:
                        _b = _a.next();
                        return [3 /*break*/, 1];
                    case 4: return [3 /*break*/, 7];
                    case 5:
                        e_1_1 = _d.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 7];
                    case 6:
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 7: return [2 /*return*/];
                }
            });
        }); };
        this._onConnectionClosed = function () {
            // Get a new one
            _this.openNodeConnection();
        };
        if (!plain) {
            this.cacheSystem = new __1.RadixCacheAccountSystem(keyPair);
            this.addAccountSystem(this.cacheSystem);
            this.decryptionSystem = new __1.RadixDecryptionAccountSystem();
            this.addAccountSystem(this.decryptionSystem);
            this.transferSystem = new __1.RadixTransferAccountSystem(keyPair);
            this.addAccountSystem(this.transferSystem);
            this.dataSystem = new RadixDataAccountSystem_1.default(keyPair);
            this.addAccountSystem(this.dataSystem);
            this.messagingSystem = new __1.RadixMessagingAccountSystem(keyPair);
            this.addAccountSystem(this.messagingSystem);
        }
    }
    /**
     * Create an instance of radix account from an address
     * @param address string address
     * @param [plain] If set to false, will not create default account systems.
     * Use this for accounts that will not be connected to the network
     * @returns
     */
    RadixAccount.fromAddress = function (address, plain) {
        if (plain === void 0) { plain = false; }
        return new RadixAccount(RadixKeyPair_1.default.fromAddress(address), plain);
    };
    RadixAccount.prototype.enableDecryption = function (decryptionProvider) {
        this.decryptionSystem.decryptionProvider = decryptionProvider;
    };
    RadixAccount.prototype.enableCache = function (cacheProvider) {
        var _this = this;
        this.cacheSystem.atomCache = cacheProvider;
        // Load atoms from cache
        return this.cacheSystem.loadAtoms().then(function (atoms) {
            var e_2, _a;
            try {
                for (var atoms_1 = tslib_1.__values(atoms), atoms_1_1 = atoms_1.next(); !atoms_1_1.done; atoms_1_1 = atoms_1.next()) {
                    var atom = atoms_1_1.value;
                    _this._onAtomReceived({
                        action: 'STORE',
                        atom: atom,
                    });
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (atoms_1_1 && !atoms_1_1.done && (_a = atoms_1.return)) _a.call(atoms_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    };
    RadixAccount.prototype.getAddress = function () {
        return this.keyPair.getAddress();
    };
    RadixAccount.prototype.addAccountSystem = function (system) {
        if (this.accountSystems.has(system.name)) {
            throw new Error("System \"" + system.name + "\" already exists in account, you can only have one of each system per account");
        }
        this.accountSystems.set(system.name, system);
        return system;
    };
    RadixAccount.prototype.removeAccountSystem = function (name) {
        if (this.accountSystems.has(name)) {
            this.accountSystems.delete(name);
        }
    };
    RadixAccount.prototype.getSystem = function (name) {
        if (this.accountSystems.has(name)) {
            return this.accountSystems.get(name);
        }
        throw new Error("System \"" + name + "\" doesn't exist in account");
    };
    return RadixAccount;
}());
exports.default = RadixAccount;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhBY2NvdW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL21vZHVsZXMvYWNjb3VudC9SYWRpeEFjY291bnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkJBQStDO0FBQy9DLGlEQUFzQztBQUl0QyxnRkFBaUQ7QUFFakQsNEZBQTZEO0FBRzdELDJEQUF5RDtBQUV6RCwyQkFBOEo7QUFDOUoscURBQThDO0FBRTlDO0lBYUk7Ozs7O09BS0c7SUFDSCxzQkFBcUIsT0FBcUIsRUFBRSxLQUFhO1FBQXpELGlCQWlCQztRQWpCMkMsc0JBQUEsRUFBQSxhQUFhO1FBQXBDLFlBQU8sR0FBUCxPQUFPLENBQWM7UUFqQmxDLG1CQUFjLEdBQXNDLElBQUksc0JBQUssRUFBRSxDQUFBO1FBR2hFLHFCQUFnQixHQUE0QixJQUFJLHNCQUFlLENBQUMsVUFBVSxDQUFDLENBQUE7UUE0RjNFLHVCQUFrQixHQUFHOzs7Ozt3QkFDeEIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQTs7Ozt3QkFFcEMsS0FBQSxJQUFJLENBQUE7d0JBQWtCLHFCQUFNLDZCQUFhLENBQUMsaUJBQWlCLENBQ3ZELElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQzFCLEVBQUE7O3dCQUZELEdBQUssY0FBYyxHQUFHLFNBRXJCLENBQUE7d0JBQ0QsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQTt3QkFDdkMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO3dCQUUxRCxzQkFBc0I7d0JBQ3RCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FDakQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FDMUIsQ0FBQTt3QkFDRCxJQUFJLENB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