import Datastore from 'nedb';
import { RadixSerializer } from '../RadixAtomModel';
import { logger } from '../common/RadixLogger';
export default class RadixNEDBAtomCache {
    /**
     * Creates an instance of radix nedbatom cache.
     * @param filename File path on disk in Node, path in localStorage in the browser
     */
    constructor(filename) {
        this.storeAtom = (atom) => {
            return this.notExists({ _id: atom._id })
                .then(() => {
                // logger.info('Atom doesnt exist, storing ', atom._id, atom)
                // Add particle ids?
                // Serialize
                const serializedAtom = atom.toJson();
                serializedAtom['_id'] = atom._id;
                // logger.info(serializedAtom)
                // Store
                return this.insert(serializedAtom);
            })
                .then((newDoc) => {
                // Success
                // logger.info('Atom stored in DB', newDoc)
                return atom;
            })
                .catch(error => {
                logger.trace('Atom already in DB');
            });
        };
        this.getAtoms = (keyPair) => {
            // Find
            let query = {};
            // Filter by destination
            if (keyPair) {
                const destination = keyPair.getUID().toJson();
                query = { destinations: destination };
            }
            // logger.info(query)
            return this.find(query).then(async (atoms) => {
                // logger.info(atoms)
                // Deserialize
                const deserialized = [];
                for (const atom of atoms) {
                    deserialized.push(await this.asyncDeserialize(atom));
                }
                return deserialized;
            });
        };
        // Promise wrappers for nedb
        this.findOne = (opt) => {
            return new Promise((resolve, reject) => {
                this.db.findOne(opt, (error, doc) => {
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve(doc);
                    }
                });
            });
        };
        this.notExists = (opt) => {
            return new Promise((resolve, reject) => {
                this.db.findOne(opt, (error, doc) => {
                    if (error) {
                        reject(error);
                    }
                    else if (!doc) {
                        resolve(true);
                    }
                    reject('Atom already in db');
                });
            });
        };
        this.find = (opt) => {
            return new Promise((resolve, reject) => {
                this.db.find(opt, (error, doc) => {
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve(doc);
                    }
                });
            });
        };
        this.insert = (opt) => {
            return new Promise((resolve, reject) => {
                this.db.insert(opt, (error, doc) => {
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve(doc);
                    }
                });
            });
        };
        this.remove = (opt) => {
            return new Promise((resolve, reject) => {
                this.db.remove(opt, (error, doc) => {
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve(doc);
                    }
                });
            });
        };
        this.db = new Datastore({
            filename,
            autoload: true,
        });
    }
    /**
     * Clears all atoms from the cache
     */
    reset() {
        this.db.remove({}, { multi: true }, (error, numRemoved) => {
            // Do nothing
        });
    }
    asyncDeserialize(atom) {
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                resolve(RadixSerializer.fromJson(atom));
            }, 0);
        });
    }
    deleteAtom(atom) {
        return this.remove({ _id: atom._id });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhORURCQXRvbUNhY2hlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL21vZHVsZXMvY2FjaGUvUmFkaXhORURCQXRvbUNhY2hlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sU0FBUyxNQUFNLE1BQU0sQ0FBQTtBQUk1QixPQUFPLEVBQTJCLGVBQWUsRUFBRSxNQUFNLG1CQUFtQixDQUFBO0FBQzVFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQTtBQUU5QyxNQUFNLENBQUMsT0FBTyxPQUFPLGtCQUFrQjtJQUduQzs7O09BR0c7SUFDSCxZQUFZLFFBQWdCO1FBZ0JyQixjQUFTLEdBQUcsQ0FBQyxJQUFlLEVBQUUsRUFBRTtZQUNuQyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO2lCQUNuQyxJQUFJLENBQUMsR0FBRyxFQUFFO2dCQUNQLDZEQUE2RDtnQkFDN0Qsb0JBQW9CO2dCQUVwQixZQUFZO2dCQUNaLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQTtnQkFDcEMsY0FBYyxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUE7Z0JBQ2hDLDhCQUE4QjtnQkFFOUIsUUFBUTtnQkFDUixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUE7WUFDdEMsQ0FBQyxDQUFDO2lCQUNELElBQUksQ0FBQyxDQUFDLE1BQVcsRUFBRSxFQUFFO2dCQUNsQixVQUFVO2dCQUNWLDJDQUEyQztnQkFFM0MsT0FBTyxJQUFJLENBQUE7WUFDZixDQUFDLENBQUM7aUJBQ0QsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUNYLE1BQU0sQ0FBQyxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQTtZQUN0QyxDQUFDLENBQUMsQ0FBQTtRQUNWLENBQUMsQ0FBQTtRQUVN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