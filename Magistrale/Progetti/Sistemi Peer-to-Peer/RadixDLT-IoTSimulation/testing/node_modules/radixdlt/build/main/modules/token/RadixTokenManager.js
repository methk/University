"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var RadixAtomModel_1 = require("../RadixAtomModel");
var __1 = require("../..");
/**
 * Tokens' information manager.
 */
var RadixTokenManager = /** @class */ (function () {
    function RadixTokenManager() {
        this.tokens = {};
    }
    RadixTokenManager.prototype.initialize = function () {
        var e_1, _a;
        try {
            for (var _b = tslib_1.__values(__1.radixUniverse.universeConfig.genesis), _c = _b.next(); !_c.done; _c = _b.next()) {
                var atom = _c.value;
                if (atom.serializer === RadixAtomModel_1.RadixTokenClass.SERIALIZER) {
                    this.addOrUpdateToken(RadixAtomModel_1.RadixSerializer.fromJson(atom));
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * Add or update a token, indexed by its ID.
     *
     * @param {RadixTokenClass} token
     * @memberof RadixToken
     */
    RadixTokenManager.prototype.addOrUpdateToken = function (token) {
        this.tokens[token.id.toString()] = token;
    };
    /**
     * Get a token by ID, if it doesn't exists it searches for it in the Ledger.
     *
     * @param {string} id
     * @returns {RadixTokenClass}
     * @memberof RadixToken
     */
    RadixTokenManager.prototype.getTokenByID = function (id) {
        var token = this.tokens[id];
        if (!token) {
            // Search token by id in Ledger?
        }
        return token;
    };
    /**
     * Get a token by ISO, if it doesn't exists it searches for it in the Ledger.
     *
     * @param {string} iso
     * @returns {RadixTokenClass}
     * @memberof RadixToken
     */
    RadixTokenManager.prototype.getTokenByISO = function (iso) {
        var e_2, _a;
        try {
            for (var _b = tslib_1.__values(Object.values(this.tokens)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var token = _c.value;
                if (token.iso === iso) {
                    return token;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        // Search token by iso in Ledger?
        return null;
    };
    /**
     * Return a list of the current tokens in the manager.
     *
     * @returns
     * @memberof RadixToken
     */
    RadixTokenManager.prototype.getCurrentTokens = function () {
        return this.tokens;
    };
    return RadixTokenManager;
}());
exports.RadixTokenManager = RadixTokenManager;
exports.radixTokenManager = new RadixTokenManager();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhUb2tlbk1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbW9kdWxlcy90b2tlbi9SYWRpeFRva2VuTWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxvREFBb0U7QUFDcEUsMkJBQXFDO0FBRXJDOztHQUVHO0FBQ0g7SUFBQTtRQUNXLFdBQU0sR0FBc0MsRUFBRSxDQUFBO0lBaUV6RCxDQUFDO0lBL0RVLHNDQUFVLEdBQWpCOzs7WUFDSSxLQUFtQixJQUFBLEtBQUEsaUJBQUEsaUJBQWEsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFBLGdCQUFBLDRCQUFFO2dCQUFwRCxJQUFNLElBQUksV0FBQTtnQkFDWCxJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssZ0NBQWUsQ0FBQyxVQUFVLEVBQUU7b0JBQ2hELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxnQ0FBZSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO2lCQUN4RDthQUNKOzs7Ozs7Ozs7SUFDTCxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSw0Q0FBZ0IsR0FBdkIsVUFBd0IsS0FBc0I7UUFDMUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFBO0lBQzVDLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSSx3Q0FBWSxHQUFuQixVQUFvQixFQUFVO1FBQzFCLElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUE7UUFFN0IsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNSLGdDQUFnQztTQUNuQztRQUVELE9BQU8sS0FBSyxDQUFBO0lBQ2hCLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSSx5Q0FBYSxHQUFwQixVQUFxQixHQUFXOzs7WUFDNUIsS0FBb0IsSUFBQSxLQUFBLGlCQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBLGdCQUFBLDRCQUFFO2dCQUEzQyxJQUFNLEtBQUssV0FBQTtnQkFDWixJQUFJLEtBQUssQ0FBQyxHQUFHLEtBQUssR0FBRyxFQUFFO29CQUNuQixPQUFPLEtBQUssQ0FBQTtpQkFDZjthQUNKOzs7Ozs7Ozs7UUFFRCxpQ0FBaUM7UUFFakMsT0FBTyxJQUFJLENBQUE7SUFDZixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSw0Q0FBZ0IsR0FBdkI7UUFDSSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUE7SUFDdEIsQ0FBQztJQUNMLHdCQUFDO0FBQUQsQ0FBQyxBQWxFRCxJQWtFQztBQWxFWSw4Q0FBaUI7QUFvRW5CLFFBQUEsaUJBQWlCLEdBQUcsSUFBSSxpQkFBaUIsRUFBRSxDQUFBIn0=