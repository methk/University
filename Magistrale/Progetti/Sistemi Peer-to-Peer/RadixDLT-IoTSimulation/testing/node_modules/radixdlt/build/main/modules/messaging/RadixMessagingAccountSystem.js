"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var rxjs_1 = require("rxjs");
var typescript_map_1 = require("typescript-map");
var RadixAtomModel_1 = require("../RadixAtomModel");
var RadixMessagingAccountSystem = /** @class */ (function () {
    function RadixMessagingAccountSystem(keyPair) {
        this.keyPair = keyPair;
        this.name = 'RADIX-MESSAGING';
        this.messageSubject = new rxjs_1.Subject();
        this.chats = new typescript_map_1.TSMap();
        this.messages = new typescript_map_1.TSMap();
    }
    RadixMessagingAccountSystem.prototype.processAtomUpdate = function (atomUpdate) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var atom;
            return tslib_1.__generator(this, function (_a) {
                atom = atomUpdate.atom;
                if (atom.serializer !== RadixAtomModel_1.RadixApplicationPayloadAtom.SERIALIZER || atom.applicationId !== 'radix-messaging') {
                    return [2 /*return*/];
                }
                if (atomUpdate.action === 'STORE') {
                    this.processStoreAtom(atom);
                }
                else if (atomUpdate.action === 'DELETE') {
                    this.processDeleteAtom(atom);
                }
                return [2 /*return*/];
            });
        });
    };
    RadixMessagingAccountSystem.prototype.startNewChat = function (to) {
        // Create new chat
        var chatId = to.getAddress();
        if (this.chats.has(chatId)) {
            return;
        }
        var chatDescription = {
            address: to.getAddress(),
            chat_id: chatId,
            title: chatId,
            last_message_timestamp: Date.now(),
            messages: new typescript_map_1.TSMap()
        };
        // Add at the top
        this.chats.set(chatId, chatDescription);
    };
    RadixMessagingAccountSystem.prototype.processStoreAtom = function (atom) {
        var hid = atom.hid.toString();
        // Skip existing atoms
        if (this.messages.has(hid)) {
            return;
        }
        if (atom.payload === null) {
            return;
        }
        // Format message
        var payload = JSON.parse(atom.payload);
        // TODO: check owner
        var to = RadixAtomModel_1.RadixKeyPair.fromAddress(payload.to);
        var from = RadixAtomModel_1.RadixKeyPair.fromAddress(payload.from);
        // Chat id
        var address = null;
        var isMine = false;
        if (from.equals(this.keyPair)) {
            address = to;
            isMine = true;
        }
        else if (to.equals(this.keyPair)) {
            address = from;
        }
        if (address === null) {
            throw new Error('Error processing a radix-message atom: neither of addresses is owned by this account');
        }
        var chatId = address.toString();
        var message = {
            hid: hid,
            chat_id: chatId,
            to: to,
            from: from,
            content: payload.content,
            timestamp: atom.timestamps.default,
            is_mine: isMine
        };
        // Find existing chat
        // Otherwise create new chat
        if (!this.chats.has(chatId)) {
            var newChatDescription = {
                address: address.getAddress(),
                chat_id: chatId,
                title: chatId,
                last_message_timestamp: message.timestamp,
                messages: new typescript_map_1.TSMap(),
            };
            this.chats.set(chatId, newChatDescription);
        }
        var chatDescription = this.chats.get(chatId);
        if (message.timestamp > chatDescription.last_message_timestamp) {
            chatDescription.last_message_timestamp = message.timestamp;
        }
        chatDescription.messages.set(hid, message);
        // Move chat to the top
        this.chats.delete(chatId);
        this.chats.set(chatId, chatDescription);
        this.messages.set(hid, message);
        var messageUpdate = {
            action: 'STORE',
            hid: hid,
            message: message,
        };
        this.messageSubject.next(messageUpdate);
    };
    RadixMessagingAccountSystem.prototype.processDeleteAtom = function (atom) {
        var hid = atom.hid.toString();
        // Skip nonexisting atoms
        if (!this.messages.has(hid)) {
            return;
        }
        var message = this.messages.get(hid);
        this.chats.get(message.chat_id).messages.delete(hid);
        this.messages.delete(hid);
        var messageUpdate = {
            action: 'DELETE',
            hid: hid,
            message: message,
        };
        this.messageSubject.next(messageUpdate);
    };
    RadixMessagingAccountSystem.prototype.getAllMessages = function () {
        var _this = this;
        return rxjs_1.Observable.create(function (observer) {
            var e_1, _a;
            try {
                // Send all old transactions
                for (var _b = tslib_1.__values(_this.messages.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var message = _c.value;
                    var messageUpdate = {
                        action: 'STORE',
                        hid: message.hid,
                        message: message
                    };
                    observer.next(messageUpdate);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            // Subscribe for new ones
            _this.messageSubject.subscribe(observer);
        });
    };
    return RadixMessagingAccountSystem;
}());
exports.default = RadixMessagingAccountSystem;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhNZXNzYWdpbmdBY2NvdW50U3lzdGVtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL21vZHVsZXMvbWVzc2FnaW5nL1JhZGl4TWVzc2FnaW5nQWNjb3VudFN5c3RlbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2QkFBb0Q7QUFDcEQsaURBQXNDO0FBS3RDLG9EQUF5RztBQUV6RztJQU9JLHFDQUFxQixPQUFPO1FBQVAsWUFBTyxHQUFQLE9BQU8sQ0FBQTtRQU5yQixTQUFJLEdBQUcsaUJBQWlCLENBQUE7UUFDeEIsbUJBQWMsR0FBZ0MsSUFBSSxjQUFPLEVBQUUsQ0FBQTtRQUUzRCxVQUFLLEdBQTZCLElBQUksc0JBQUssRUFBRSxDQUFBO1FBQzdDLGFBQVEsR0FBZ0MsSUFBSSxzQkFBSyxFQUFFLENBQUE7SUFFM0IsQ0FBQztJQUVuQix1REFBaUIsR0FBOUIsVUFBK0IsVUFBMkI7Ozs7Z0JBQ2hELElBQUksR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFBO2dCQUU1QixJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssNENBQTJCLENBQUMsVUFBVSxJQUFLLElBQW9DLENBQUMsYUFBYSxLQUFLLGlCQUFpQixFQUFFO29CQUN6SSxzQkFBTTtpQkFDVDtnQkFFRCxJQUFJLFVBQVUsQ0FBQyxNQUFNLEtBQUssT0FBTyxFQUFFO29CQUMvQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBbUMsQ0FBQyxDQUFBO2lCQUM3RDtxQkFBTSxJQUFJLFVBQVUsQ0FBQyxNQUFNLEtBQUssUUFBUSxFQUFFO29CQUN2QyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBbUMsQ0FBQyxDQUFBO2lCQUM5RDs7OztLQUNKO0lBRU0sa0RBQVksR0FBbkIsVUFBb0IsRUFBZ0I7UUFDaEMsa0JBQWtCO1FBQ2xCLElBQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQTtRQUU5QixJQUFJLElBQUksQ0FBQyxLQUFLLENB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