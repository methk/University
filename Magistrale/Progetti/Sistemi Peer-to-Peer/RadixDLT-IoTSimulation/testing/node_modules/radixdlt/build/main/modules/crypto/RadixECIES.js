"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var buffer_reader_1 = tslib_1.__importDefault(require("buffer-reader"));
var elliptic_1 = tslib_1.__importDefault(require("elliptic"));
var crypto_1 = tslib_1.__importDefault(require("crypto"));
var ec = new elliptic_1.default.ec('secp256k1');
var RadixECIES = /** @class */ (function () {
    function RadixECIES() {
    }
    RadixECIES.decrypt = function (privKey, encrypted) {
        var reader = new buffer_reader_1.default(encrypted);
        var iv = reader.nextBuffer(16);
        var ephemPubKeyEncoded = reader.nextBuffer(reader.nextUInt8());
        var ciphertext = reader.nextBuffer(reader.nextUInt32BE());
        var MAC = reader.nextBuffer(32);
        var ephemPubKey = ec.keyFromPublic(ephemPubKeyEncoded).getPublic();
        var px = ec.keyFromPrivate(privKey).derive(ephemPubKey);
        // Double hash to prevent length extension attacks
        var hash = crypto_1.default
            .createHash('sha512')
            .update(crypto_1.default
            .createHash('sha512')
            .update(px.toArrayLike(Buffer))
            .digest())
            .digest();
        var encryptionKey = hash.slice(0, 32);
        var MACKey = hash.slice(32);
        var computedMAC = this.calculateMAC(MACKey, iv, ephemPubKeyEncoded, ciphertext);
        // Verify MAC
        if (!computedMAC.equals(MAC)) {
            throw new Error('MAC mismatch');
        }
        var plaintext = this.AES256CbcDecrypt(iv, encryptionKey, ciphertext);
        return plaintext;
    };
    RadixECIES.encrypt = function (pubKeyTo, plaintext) {
        var ephemPrivKey = ec.keyFromPrivate(crypto_1.default.randomBytes(32));
        var ephemPubKey = ephemPrivKey.getPublic();
        var ephemPubKeyEncoded = Buffer.from(ephemPubKey.encode('be', true));
        // Every EC public key begins with the 0x04 prefix before giving the location of the two point on the curve
        // const px = ephemPrivKey.derive(ec.keyFromPublic(Buffer.concat([Buffer.from([0x04]), pubKeyTo])).getPublic())
        var px = ephemPrivKey.derive(ec.keyFromPublic(pubKeyTo).getPublic(true));
        // Double hash to preven lenght extension attacks
        var hash = crypto_1.default
            .createHash('sha512')
            .update(crypto_1.default
            .createHash('sha512')
            .update(px.toArrayLike(Buffer))
            .digest())
            .digest();
        var iv = crypto_1.default.randomBytes(16);
        var encryptionKey = hash.slice(0, 32);
        var MACKey = hash.slice(32);
        var ciphertext = this.AES256CbcEncrypt(iv, encryptionKey, plaintext);
        var MAC = this.calculateMAC(MACKey, iv, ephemPubKeyEncoded, ciphertext);
        var offset = 0;
        var serializedCiphertext = new Buffer(iv.length +
            1 +
            ephemPubKeyEncoded.length +
            4 +
            ciphertext.length +
            MAC.length);
        // IV
        iv.copy(serializedCiphertext, 0);
        offset += iv.length;
        // Ephemeral key
        serializedCiphertext.writeUInt8(ephemPubKeyEncoded.length, offset);
        offset++;
        ephemPubKeyEncoded.copy(serializedCiphertext, offset);
        offset += ephemPubKeyEncoded.length;
        // Ciphertext
        serializedCiphertext.writeUInt32BE(ciphertext.length, offset);
        offset += 4;
        ciphertext.copy(serializedCiphertext, offset);
        offset += ciphertext.length;
        // MAC
        MAC.copy(serializedCiphertext, offset);
        return serializedCiphertext;
    };
    RadixECIES.calculateMAC = function (MACKey, iv, ephemPubKeyEncoded, ciphertext) {
        var dataToMAC = Buffer.concat([iv, ephemPubKeyEncoded, ciphertext]);
        return crypto_1.default
            .createHmac('sha256', MACKey)
            .update(dataToMAC)
            .digest();
    };
    /**
     * AES-256 CBC encrypt
     * @param {Buffer} iv
     * @param {Buffer} key
     * @param {Buffer} plaintext
     * @returns {Buffer} ciphertext
     */
    RadixECIES.AES256CbcEncrypt = function (iv, key, plaintext) {
        var cipher = crypto_1.default.createCipheriv('aes-256-cbc', key, iv);
        var firstChunk = cipher.update(plaintext);
        var secondChunk = cipher.final();
        return Buffer.concat([firstChunk, secondChunk]);
    };
    /**
     * AES-256 CBC decrypt
     * @param {Buffer} iv
     * @param {Buffer} key
     * @param {Buffer} ciphertext
     * @returns {Buffer} plaintext
     */
    RadixECIES.AES256CbcDecrypt = function (iv, key, ciphertext) {
        var cipher = crypto_1.default.createDecipheriv('aes-256-cbc', key, iv);
        var firstChunk = cipher.update(ciphertext);
        var secondChunk = cipher.final();
        return Buffer.concat([firstChunk, secondChunk]);
    };
    return RadixECIES;
}());
exports.default = RadixECIES;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhFQ0lFUy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2R1bGVzL2NyeXB0by9SYWRpeEVDSUVTLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHdFQUF3QztBQUN4Qyw4REFBeUI7QUFDekIsMERBQTJCO0FBRTNCLElBQU0sRUFBRSxHQUFHLElBQUksa0JBQUUsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUE7QUFFakM7SUFBQTtJQWdKQSxDQUFDO0lBL0lVLGtCQUFPLEdBQWQsVUFBZSxPQUFlLEVBQUUsU0FBaUI7UUFDN0MsSUFBSSxNQUFNLEdBQUcsSUFBSSx1QkFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBRXhDLElBQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUE7UUFDaEMsSUFBTSxrQkFBa0IsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFBO1FBQ2hFLElBQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUE7UUFDM0QsSUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUVqQyxJQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUFDLENBQUMsU0FBUyxFQUFFLENBQUE7UUFFcEUsSUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUE7UUFDekQsa0RBQWtEO1FBQ2xELElBQU0sSUFBSSxHQUFHLGdCQUFNO2FBQ2QsVUFBVSxDQUFDLFFBQVEsQ0FBQzthQUNwQixNQUFNLENBQ0gsZ0JBQU07YUFDRCxVQUFVLENBQUMsUUFBUSxDQUFDO2FBQ3BCLE1BQU0sQ0FBQyxFQUFFLENBQUMsV0FB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