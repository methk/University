"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var axios_1 = tslib_1.__importDefault(require("axios"));
var RadixAtomModel_1 = require("../RadixAtomModel");
/**
 * Node discovery from the Radix bootstrap service
 */
var RadixNodeDiscoveryFromNodeFinder = /** @class */ (function () {
    /**
     * Creates an instance of radix node discovery from node finder.
     * @param bootstrapService The full address to the node finder service for the universe
     */
    function RadixNodeDiscoveryFromNodeFinder(bootstrapService, nodeRPCAddress) {
        this.bootstrapService = bootstrapService;
        this.nodeRPCAddress = nodeRPCAddress;
    }
    RadixNodeDiscoveryFromNodeFinder.prototype.loadNodes = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var bootstrapNodeIP, bootstrapNode, getPeersRequestData, nodeListResponse, nodeList;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, axios_1.default.get(this.bootstrapService)];
                    case 1:
                        bootstrapNodeIP = (_a.sent()).data;
                        if (bootstrapNodeIP.length < 2) {
                            throw new Error('Failed to get node list from bootstrap service');
                        }
                        bootstrapNode = this.nodeRPCAddress(bootstrapNodeIP);
                        getPeersRequestData = {
                            id: 0,
                            method: 'Network.getLivePeers',
                            params: []
                        };
                        return [4 /*yield*/, axios_1.default.post(bootstrapNode, getPeersRequestData)];
                    case 2:
                        nodeListResponse = _a.sent();
                        nodeList = RadixAtomModel_1.RadixSerializer.fromJson(nodeListResponse.data.result);
                        if (nodeList.length === 0) {
                            throw new Error('Bootstrap node has no connections');
                        }
                        return [2 /*return*/, nodeList];
                }
            });
        });
    };
    return RadixNodeDiscoveryFromNodeFinder;
}());
exports.default = RadixNodeDiscoveryFromNodeFinder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhOb2RlRGlzY292ZXJ5RnJvbU5vZGVGaW5kZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbW9kdWxlcy91bml2ZXJzZS9SYWRpeE5vZGVEaXNjb3ZlcnlGcm9tTm9kZUZpbmRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx3REFBeUI7QUFJekIsb0RBQW1EO0FBRW5EOztHQUVHO0FBQ0g7SUFFSTs7O09BR0c7SUFDSCwwQ0FDYSxnQkFBd0IsRUFDeEIsY0FBMEM7UUFEMUMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFRO1FBQ3hCLG1CQUFjLEdBQWQsY0FBYyxDQUE0QjtJQUFHLENBQUM7SUFFOUMsb0RBQVMsR0FBdEI7Ozs7OzRCQUM2QixxQkFBTSxlQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFBOzt3QkFBekQsZUFBZSxHQUFHLENBQUMsU0FBc0MsQ0FBQyxDQUFDLElBQUk7d0JBQ3JFLElBQUksZUFBZSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7NEJBQzVCLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0RBQWdELENBQUMsQ0FBQTt5QkFDcEU7d0JBQ0ssYUFBYSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLENBQUE7d0JBRXBELG1CQUFtQixHQUFHOzRCQUN4QixFQUFFLEVBQUUsQ0FBQzs0QkFDTCxNQUFNLEVBQUUsc0JBQXNCOzRCQUM5QixNQUFNLEVBQUUsRUFBRTt5QkFDYixDQUFBO3dCQUN3QixxQkFBTSxlQUFLLENBQUMsSUFBSSxDQUNyQyxhQUFhLEVBQ2IsbUJBQW1CLENBQ3RCLEVBQUE7O3dCQUhLLGdCQUFnQixHQUFHLFNBR3hCO3dCQUVLLFFBQVEsR0FBRyxnQ0FBZSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7d0JBRXZFLElBQUksUUFBUSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7NEJBQ3ZCLE1BQU0sSUFBSSxLQUFLLENBQUMsbUNBQW1DLENBQUMsQ0FBQTt5QkFDdkQ7d0JBRUQsc0JBQU8sUUFBUSxFQUFBOzs7O0tBQ2xCO0lBQ0wsdUNBQUM7QUFBRCxDQUFDLEFBbkNELElBbUNDIn0=