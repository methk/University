"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var rxjs_1 = require("rxjs");
var RadixFeeProvider_1 = tslib_1.__importDefault(require("../fees/RadixFeeProvider"));
var RadixUniverse_1 = require("../universe/RadixUniverse");
var __1 = require("../..");
var RadixAtomModel_1 = require("../RadixAtomModel");
var RadixTransactionBuilder = /** @class */ (function () {
    function RadixTransactionBuilder() {
        this.particles = [];
        this.action = 'STORE';
        this.operation = 'TRANSFER';
    }
    /**
     * Creates transfer atom
     * @param from Sender account, needs to have RadixAccountTransferSystem
     * @param to Receiver account
     * @param token The TokenClass or an ISO string name
     * @param decimalQuantity
     * @param [message] Optional reference message
     */
    RadixTransactionBuilder.createTransferAtom = function (from, to, token, decimalQuantity, message) {
        return new RadixTransactionBuilder().createTransferAtom(from, to, token, decimalQuantity, message);
    };
    /**
     * Creates transfer atom
     * @param from Sender account, needs to have RadixAccountTransferSystem
     * @param to Receiver account
     * @param token The TokenClass or an ISO string name
     * @param decimalQuantity
     * @param [message] Optional reference message
     */
    RadixTransactionBuilder.prototype.createTransferAtom = function (from, to, token, decimalQuantity, message) {
        var e_1, _a;
        this.type = 'TRANSFER';
        if (isNaN(decimalQuantity)) {
            throw new Error('Amount is not a valid number');
        }
        var tokenClass;
        if (typeof token === 'string') {
            tokenClass = __1.radixTokenManager.getTokenByISO(token);
        }
        else if (token instanceof RadixAtomModel_1.RadixTokenClass) {
            tokenClass = token;
        }
        else {
            throw new Error('Invalid token supplied');
        }
        var quantity = tokenClass.toSubunits(decimalQuantity);
        if (quantity < 0) {
            throw new Error('Cannot send negative amount');
        }
        else if (quantity === 0 && decimalQuantity > 0) {
            var decimalPlaces = Math.log10(tokenClass.sub_units);
            throw new Error("You can only specify up to " + decimalPlaces + " decimal places");
        }
        else if (quantity === 0 && decimalQuantity === 0) {
            throw new Error("Cannot send 0");
        }
        var transferSytem = from.getSystem('TRANSFER');
        if (quantity > transferSytem.balance[tokenClass.id.toString()]) {
            throw new Error('Insufficient funds');
        }
        var particles = [];
        var unspentConsumables = transferSytem.getUnspentConsumables();
        var consumerQuantity = 0;
        try {
            for (var _b = tslib_1.__values(unspentConsumables.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = tslib_1.__read(_c.value, 2), consumable = _d[1];
                if (consumable.asset_id.toString() !== tokenClass.id.toString()) {
                    continue;
                }
                var consumer = new RadixAtomModel_1.RadixConsumer(consumable);
                particles.push(consumer);
                consumerQuantity += consumer.quantity;
                if (consumerQuantity >= quantity) {
                    break;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        // Create consumables
        var recipientConsumable = new RadixAtomModel_1.RadixConsumable();
        recipientConsumable.asset_id = tokenClass.id;
        recipientConsumable.quantity = quantity;
        // recipientConsumable.quantity = Long.fromNumber(quantity)
        recipientConsumable.destinations = [to.keyPair.getUID()];
        recipientConsumable.nonce = Date.now();
        recipientConsumable.owners = [
            RadixAtomModel_1.RadixECKeyPair.fromRadixKeyPair(to.keyPair)
        ];
        particles.push(recipientConsumable);
        // Transfer reminder back to self
        if (consumerQuantity - quantity > 0) {
            var reminderConsumable = new RadixAtomModel_1.RadixConsumable();
            reminderConsumable.asset_id = tokenClass.id;
            reminderConsumable.quantity = consumerQuantity - quantity;
            reminderConsumable.destinations = [from.keyPair.getUID()];
            reminderConsumable.nonce = Date.now();
            reminderConsumable.owners = [
                RadixAtomModel_1.RadixECKeyPair.fromRadixKeyPair(from.keyPair)
            ];
            particles.push(reminderConsumable);
        }
        this.action = 'STORE';
        this.operation = 'TRANSFER';
        this.particles = particles;
        this.recipients = [from, to];
        if (message) {
            this.payload = message;
        }
        return this;
    };
    /**
     * Creates payload atom
     * @param from
     * @param to
     * @param applicationId
     * @param payload
     * @param [encrypted] Sets if the message should be encrypted using ECIES
     */
    RadixTransactionBuilder.createPayloadAtom = function (readers, applicationId, payload, encrypted) {
        if (encrypted === void 0) { encrypted = true; }
        return new RadixTransactionBuilder().createPayloadAtom(readers, applicationId, payload, encrypted);
    };
    /**
     * Creates payload atom
     * @param from
     * @param to
     * @param applicationId
     * @param payload
     * @param [encrypted] Sets if the message should be encrypted using ECIES
     */
    RadixTransactionBuilder.prototype.createPayloadAtom = function (readers, applicationId, payload, encrypted) {
        var e_2, _a;
        if (encrypted === void 0) { encrypted = true; }
        this.type = 'PAYLOAD';
        var recipients = [];
        try {
            for (var readers_1 = tslib_1.__values(readers), readers_1_1 = readers_1.next(); !readers_1_1.done; readers_1_1 = readers_1.next()) {
                var account = readers_1_1.value;
                recipients.push(account);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (readers_1_1 && !readers_1_1.done && (_a = readers_1.return)) _a.call(readers_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        this.recipients = recipients;
        this.applicationId = applicationId;
        this.payload = payload;
        this.encrypted = encrypted;
        return this;
    };
    /**
     * Creates radix messaging application payload atom
     * @param from
     * @param to
     * @param message
     */
    RadixTransactionBuilder.createRadixMessageAtom = function (from, to, message) {
        return new RadixTransactionBuilder().createRadixMessageAtom(from, to, message);
    };
    /**
     * Creates radix messaging application payload atom
     * @param from
     * @param to
     * @param message
     */
    RadixTransactionBuilder.prototype.createRadixMessageAtom = function (from, to, message) {
        this.type = 'PAYLOAD';
        var recipients = [];
        recipients.push(from);
        recipients.push(to);
        var payload = JSON.stringify({
            to: to.getAddress(),
            from: from.getAddress(),
            content: message,
        });
        this.recipients = recipients;
        this.applicationId = 'radix-messaging';
        this.payload = payload;
        this.encrypted = true;
        return this;
    };
    /**
     * Builds the atom, finds a node to submit to, adds network fee, signs the atom and submits
     * @param signer
     * @returns a BehaviourSubject that streams the atom status updates
     */
    RadixTransactionBuilder.prototype.signAndSubmit = function (signer) {
        var _this = this;
        var atom = null;
        if (this.type === 'TRANSFER') {
            atom = new RadixAtomModel_1.RadixTransactionAtom();
            atom.action = this.action;
            atom.operation = this.operation;
            atom.particles = this.particles;
            atom.destinations = this.recipients.map(function (account) { return account.keyPair.getUID(); });
            atom.timestamps = { default: Date.now() };
            if (this.payload) {
                atom.addEncryptedPayload(this.payload, this.recipients.map(function (account) { return account.keyPair; }));
            }
        }
        else if (this.type === 'PAYLOAD') {
            atom = RadixAtomModel_1.RadixApplicationPayloadAtom.withEncryptedPayload(this.payload, this.recipients.map(function (account) { return account.keyPair; }), this.applicationId, this.encrypted);
            atom.particles = this.particles;
        }
        else {
            throw new Error('Atom details have not been specified, call one of the builder methods first');
        }
        // Find a shard, any of the participant shards is ok
        var shard = this.recipients[0].keyPair.getShard();
        // Get node from universe
        var nodeConnection = null;
        var stateSubject = new rxjs_1.BehaviorSubject('FINDING_NODE');
        var signedAtom = null;
        RadixUniverse_1.radixUniverse
            .getNodeConnection(shard)
            .then(function (connection) {
            nodeConnection = connection;
            // Add POW fee
            stateSubject.next('GENERATING_POW');
            return RadixFeeProvider_1.default.generatePOWFee(RadixUniverse_1.radixUniverse.universeConfig.getMagic(), __1.radixTokenManager.getTokenByISO('POW'), atom, nodeConnection);
        })
            .then(function (powFeeConsumable) {
            atom.particles.push(powFeeConsumable);
            // Sing atom
            stateSubject.next('SIGNING');
            return signer.signAtom(atom);
        })
            .then(function (_signedAtom) {
            var e_3, _a;
            signedAtom = _signedAtom;
            try {
                // Push atom into recipient accounts to minimize delay
                for (var _b = tslib_1.__values(_this.recipients), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var recipient = _c.value;
                    recipient._onAtomReceived({
                        action: 'STORE',
                        atom: signedAtom,
                    });
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
            var submissionSbuject = nodeConnection.submitAtom(signedAtom);
            submissionSbuject.subscribe(stateSubject);
            submissionSbuject.subscribe({ error: function (error) {
                    var e_4, _a;
                    try {
                        // Delete atom from recipient accounts
                        for (var _b = tslib_1.__values(_this.recipients), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var recipient = _c.value;
                            recipient._onAtomReceived({
                                action: 'DELETE',
                                atom: signedAtom,
                            });
                        }
                    }
                    catch (e_4_1) { e_4 = { error: e_4_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_4) throw e_4.error; }
                    }
                } });
        })
            .catch(function (error) {
            stateSubject.error(error);
        });
        return stateSubject;
    };
    return RadixTransactionBuilder;
}());
exports.default = RadixTransactionBuilder;
//# sourceMappingURL=data:application/json;base64,