import { TSMap } from 'typescript-map';
import RadixUtil from '../common/RadixUtil';
import { RadixSerializer, RadixEUID, DataTypes } from '../RadixAtomModel';
export default class RadixBasicContainer {
    constructor(json) {
        this.version = 100;
        this.serializationProperties = new Array();
        if (json) {
            for (let key in json) {
                if (key == 'constructor' || key == 'serializationProperties') {
                    continue;
                }
                this[key] = json[key];
            }
        }
        // this.serializationProperties.push('serializer')
        this.serializationProperties.push('version');
    }
    get serializer() {
        return this.constructor['SERIALIZER'];
    }
    set serializer(serializer) {
        // Do nothing
    }
    toJson() {
        let output = { serializer: 0 };
        for (let key in this) {
            let serialized = RadixSerializer.toJson(this[key]);
            if (serialized) {
                output[key] = serialized;
            }
        }
        output.serializer = this.constructor['SERIALIZER'];
        return output;
    }
    toByteArray() {
        // Generic object
        let type = DataTypes.OBJECT;
        let length = 0;
        // Serialize all properties
        // Build a map sorted by property name
        let map = new TSMap();
        for (let key of this.serializationProperties) {
            if (!(key in this)) {
                continue;
            }
            let serializedValue = RadixSerializer.toByteArray(this[key]);
            length += key.length + 1 + serializedValue.length;
            map.sortedSet(key, serializedValue);
        }
        // Write everything to the buffer
        let output = Buffer.alloc(length + 5);
        output.writeUInt8(type, 0);
        output.writeUInt32BE(length, 1);
        let position = 5;
        for (let key of map.keys()) {
            let value = map.get(key);
            output.writeUInt8(key.length, position);
            position++;
            output.write(key, position);
            position += key.length;
            value.copy(output, position);
            position += value.length;
        }
        return output;
    }
    getHash() {
        let serialized = this.toByteArray();
        return RadixUtil.hash(serialized);
    }
    getHID() {
        let hash = this.getHash();
        return new RadixEUID(hash.slice(0, 12));
    }
    get hid() {
        return this.getHID();
    }
    set hid(hid) {
        // Do nothing
    }
    get _id() {
        return this.hid.toString();
    }
    set _id(_id) {
        // Do nothing
    }
    getSize() {
        return this.toByteArray().length;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhCYXNpY0NvbnRhaW5lci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2R1bGVzL2F0b20vUmFkaXhCYXNpY0NvbnRhaW5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZ0JBQWdCLENBQUE7QUFFdEMsT0FBTyxTQUFTLE1BQU0scUJBQXFCLENBQUE7QUFFM0MsT0FBTyxFQUVILGVBQWUsRUFDZixTQUFTLEVBQ1QsU0FBUyxFQUNaLE1BQU0sbUJBQW1CLENBQUE7QUFFMUIsTUFBTSxDQUFDLE9BQU8sT0FBZ0IsbUJBQW1CO0lBTTdDLFlBQVksSUFBYTtRQUxsQixZQUFPLEdBQUcsR0FBRyxDQUFBO1FBR1YsNEJBQXVCLEdBQUcsSUFBSSxLQUFLLEVBQVUsQ0FBQTtRQUduRCxJQUFJLElBQUksRUFBRTtZQUNOLEtBQUssSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFO2dCQUNsQixJQUFJLEdBQUcsSUFBSSxhQUFhLElBQUksR0FBRyxJQUFJLHlCQUF5QixFQUFFO29CQUMxRCxTQUFRO2lCQUNYO2dCQUVELElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7YUFDeEI7U0FDSjtRQUVELGtEQUFrRDtRQUNsRCxJQUFJLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBQ2hELENBQUM7SUFFRCxJQUFJLFVBQVU7UUFDVixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUE7SUFDekMsQ0FBQztJQUVELElBQUksVUFBVSxDQUFDLFVBQVU7UUFDckIsYUFBYTtJQUNqQixDQUFDO0lBRU0sTUFBTTtRQUNULElBQUksTUFBTSxHQUFHLEVBQUUsVUFBVSxFQUFFLENBQUMsRUFBRSxDQUFBO1FBQzlCLEtBQUssSUFBSSxHQUFHLElBQVMsSUFBSSxFQUFFO1lBQ3ZCLElBQUksVUFB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