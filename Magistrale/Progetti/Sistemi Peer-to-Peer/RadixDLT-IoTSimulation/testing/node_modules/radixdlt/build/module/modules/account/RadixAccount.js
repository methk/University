import { BehaviorSubject } from 'rxjs';
import { TSMap } from 'typescript-map';
import RadixKeyPair from '../wallet/RadixKeyPair';
import RadixDataAccountSystem from './RadixDataAccountSystem';
import { radixUniverse } from '../universe/RadixUniverse';
import { RadixTransferAccountSystem, RadixMessagingAccountSystem, RadixDecryptionAccountSystem, RadixCacheAccountSystem } from '../..';
import { logger } from '../common/RadixLogger';
export default class RadixAccount {
    /**
     * Creates an instance of radix account.
     * @param keyPair Public key of the account
     * @param [plain] If set to false, will not create default account systems.
     * Use this for accounts that will not be connected to the network
     */
    constructor(keyPair, plain = false) {
        this.keyPair = keyPair;
        this.accountSystems = new TSMap();
        this.connectionStatus = new BehaviorSubject('STARTING');
        this.openNodeConnection = async () => {
            this.connectionStatus.next('CONNECTING');
            try {
                this.nodeConnection = await radixUniverse.getNodeConnection(this.keyPair.getShard());
                this.connectionStatus.next('CONNECTED');
                this.nodeConnection.on('closed', this._onConnectionClosed);
                // Subscribe to events
                this.atomSubscription = this.nodeConnection.subscribe(this.keyPair.toString());
                this.atomSubscription.subscribe({
                    next: this._onAtomReceived,
                    error: error => logger.error('Subscription error:', error)
                });
            }
            catch (error) {
                logger.error(error);
                setTimeout(this._onConnectionClosed, 1000);
            }
        };
        this._onAtomReceived = async (atomUpdate) => {
            for (const system of this.accountSystems.values()) {
                await system.processAtomUpdate(atomUpdate);
            }
        };
        this._onConnectionClosed = () => {
            // Get a new one
            this.openNodeConnection();
        };
        if (!plain) {
            this.cacheSystem = new RadixCacheAccountSystem(keyPair);
            this.addAccountSystem(this.cacheSystem);
            this.decryptionSystem = new RadixDecryptionAccountSystem();
            this.addAccountSystem(this.decryptionSystem);
            this.transferSystem = new RadixTransferAccountSystem(keyPair);
            this.addAccountSystem(this.transferSystem);
            this.dataSystem = new RadixDataAccountSystem(keyPair);
            this.addAccountSystem(this.dataSystem);
            this.messagingSystem = new RadixMessagingAccountSystem(keyPair);
            this.addAccountSystem(this.messagingSystem);
        }
    }
    /**
     * Create an instance of radix account from an address
     * @param address string address
     * @param [plain] If set to false, will not create default account systems.
     * Use this for accounts that will not be connected to the network
     * @returns
     */
    static fromAddress(address, plain = false) {
        return new RadixAccount(RadixKeyPair.fromAddress(address), plain);
    }
    enableDecryption(decryptionProvider) {
        this.decryptionSystem.decryptionProvider = decryptionProvider;
    }
    enableCache(cacheProvider) {
        this.cacheSystem.atomCache = cacheProvider;
        // Load atoms from cache
        return this.cacheSystem.loadAtoms().then((atoms) => {
            for (const atom of atoms) {
                this._onAtomReceived({
                    action: 'STORE',
                    atom,
                });
            }
        });
    }
    getAddress() {
        return this.keyPair.getAddress();
    }
    addAccountSystem(system) {
        if (this.accountSystems.has(system.name)) {
            throw new Error(`System "${system.name}" already exists in account, you can only have one of each system per account`);
        }
        this.accountSystems.set(system.name, system);
        return system;
    }
    removeAccountSystem(name) {
        if (this.accountSystems.has(name)) {
            this.accountSystems.delete(name);
        }
    }
    getSystem(name) {
        if (this.accountSystems.has(name)) {
            return this.accountSystems.get(name);
        }
        throw new Error(`System "${name}" doesn't exist in account`);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhBY2NvdW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL21vZHVsZXMvYWNjb3VudC9SYWRpeEFjY291bnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBVyxNQUFNLE1BQU0sQ0FBQTtBQUMvQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZ0JBQWdCLENBQUE7QUFJdEMsT0FBTyxZQUFZLE1BQU0sd0JBQXdCLENBQUE7QUFFakQsT0FBTyxzQkFBc0IsTUFBTSwwQkFBMEIsQ0FBQTtBQUc3RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sMkJBQTJCLENBQUE7QUFFekQsT0FBTyxFQUFFLDBCQUEwQixFQUFFLDJCQUEyQixFQUFFLDRCQUE0QixFQUEwQix1QkFBdUIsRUFBRSxNQUFNLE9BQU8sQ0FBQTtBQUM5SixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sdUJBQXVCLENBQUE7QUFFOUMsTUFBTSxDQUFDLE9BQU8sT0FBTyxZQUFZO0lBYTdCOzs7OztPQUtHO0lBQ0gsWUFBcUIsT0FBcUIsRUFBRSxLQUFLLEdBQUcsS0FBSztRQUFwQyxZQUFPLEdBQVAsT0FBTyxDQUFjO1FBakJsQyxtQkFBYyxHQUFzQyxJQUFJLEtBQUssRUFBRSxDQUFBO1FBR2hFLHFCQUFnQixHQUE0QixJQUFJLGVBQWUsQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQTRGM0UsdUJBQWtCLEdBQUcsS0FBSyxJQUFJLEVBQUU7WUFDbkMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQTtZQUN4QyxJQUFJO2dCQUNBLElBQUksQ0FBQyxjQUFjLEdBQUcsTUFBTSxhQUFhLENBQUMsaUJBQWlCLENBQ3ZELElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQzFCLENBQUE7Z0JBQ0QsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQTtn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