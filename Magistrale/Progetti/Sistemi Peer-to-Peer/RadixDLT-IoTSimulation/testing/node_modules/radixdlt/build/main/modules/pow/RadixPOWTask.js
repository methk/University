"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var RadixPOW_1 = tslib_1.__importDefault(require("./RadixPOW"));
var RadixLogger_1 = require("../common/RadixLogger");
var RadixPOWTask = /** @class */ (function () {
    function RadixPOWTask(magic, seed, target) {
        this.magic = magic;
        this.seed = seed;
        this.target = target;
        this.pow = new RadixPOW_1.default(magic, seed);
        RadixLogger_1.logger.debug(target.toString('hex'));
    }
    RadixPOWTask.prototype.computePow = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.attemptPow(resolve);
        });
    };
    // attemptPow(callback: Function) {
    //    const hash = this.pow.getHash()
    //    if (this.meetsTarget(hash)) {
    //        logger.debug(hash.toString('hex'))
    //        callback(this.pow)
    //    }
    //    else {
    //        this.pow.incrementNonce()
    //        // Non-blocking
    //        setTimeout(() => {
    //            this.attemptPow(callback)
    //        }, 0)
    //    }
    // }
    RadixPOWTask.prototype.attemptPow = function (callback) {
        var _this = this;
        for (var i = 0; i < 100; i++) {
            this.pow.incrementNonce();
            var hash = this.pow.getHash();
            if (this.meetsTarget(hash)) {
                RadixLogger_1.logger.debug(hash.toString('hex'));
                setTimeout(function () {
                    callback(_this.pow);
                });
                return;
            }
        }
        // Non-blocking
        setTimeout(function () {
            _this.attemptPow(callback);
        }, 0);
    };
    RadixPOWTask.prototype.meetsTarget = function (hash) {
        return hash.compare(this.target) < 0;
    };
    return RadixPOWTask;
}());
exports.default = RadixPOWTask;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhQT1dUYXNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL21vZHVsZXMvcG93L1JhZGl4UE9XVGFzay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxnRUFBaUM7QUFFakMscURBQThDO0FBRTlDO0lBR0ksc0JBQ2EsS0FBYSxFQUNiLElBQVksRUFDWixNQUFjO1FBRmQsVUFBSyxHQUFMLEtBQUssQ0FBUTtRQUNiLFNBQUksR0FBSixJQUFJLENBQVE7UUFDWixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBRXZCLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxrQkFBUSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQTtRQUVwQyxvQkFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7SUFDeEMsQ0FBQztJQUVELGlDQUFVLEdBQVY7UUFBQSxpQkFJQztRQUhHLE9BQU8sSUFBSSxPQUFPLENBQVcsVUFBQyxPQUFPLEVBQUUsTUFBTTtZQUN6QyxLQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQzVCLENBQUMsQ0FBQyxDQUFBO0lBQ04sQ0FBQztJQUVELG1DQUFtQztJQUNuQyxxQ0FBcUM7SUFDckMsbUNBQW1DO0lBQ25DLDRDQUE0QztJQUM1Qyw0QkFBNEI7SUFDNUIsT0FBTztJQUNQLFlBQVk7SUFDWixtQ0FBbUM7SUFFbkMseUJBQXlCO0lBQ3pCLDRCQUE0QjtJQUM1Qix1Q0FBdUM7SUFDdkMsZUFBZTtJQUNmLE9BQU87SUFDUCxJQUFJO0lBRUosaUNBQVUsR0FBVixVQUFXLFFBQWtCO1FBQTdCLGlCQW9CQztRQW5CRyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzFCLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLENBQUE7WUFDekIsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtZQUUvQixJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ3hCLG9CQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtnQkFFbEMsVUFBVSxDQUFDO29CQUNQLFFBQVEsQ0FBQyxLQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7Z0JBQ3RCLENBQUMsQ0FBQyxDQUFBO2dCQUVGLE9BQU07YUFDVDtTQUNKO1FBRUQsZUFBZTtRQUNmLFVBQVUsQ0FBQztZQUNQLEtBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDN0IsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQ1QsQ0FBQztJQUVELGtDQUFXLEdBQVgsVUFBWSxJQUFZO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ3hDLENBQUM7SUFDTCxtQkFBQztBQUFELENBQUMsQUE1REQsSUE0REMifQ==