"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Rx_1 = require("rxjs/Rx");
var rpc_websockets_1 = require("rpc-websockets");
var RadixAtomModel_1 = require("../RadixAtomModel");
var RadixLogger_1 = require("../common/RadixLogger");
var events_1 = tslib_1.__importDefault(require("events"));
var RadixNodeConnection = /** @class */ (function (_super) {
    tslib_1.__extends(RadixNodeConnection, _super);
    function RadixNodeConnection(node, nodeRPCAddress) {
        var _this = _super.call(this) || this;
        _this.node = node;
        _this.nodeRPCAddress = nodeRPCAddress;
        _this._subscriptions = {};
        _this._atomUpdateSubjects = {};
        _this.lastSubscriberId = 1;
        _this.ping = function () {
            if (_this.isReady()) {
                _this._socket
                    .call('Network.getSelf', { id: 0 }).then(function (response) {
                    RadixLogger_1.logger.debug("Ping", response);
                });
            }
        };
        _this.close = function () {
            _this._socket.close();
        };
        _this._onClosed = function () {
            RadixLogger_1.logger.info('Socket closed');
            if (_this.pingInterval) {
                clearInterval(_this.pingInterval);
            }
            // Close subject
            for (var subscriberId in _this._subscriptions) {
                var subscription = _this._subscriptions[subscriberId];
                if (!subscription.closed) {
                    subscription.error('Socket closed');
                }
            }
            for (var subscriberId in _this._atomUpdateSubjects) {
                var subject = _this._atomUpdateSubjects[subscriberId];
                if (!subject.closed) {
                    subject.error('Socket closed');
                }
            }
            _this.emit('closed');
        };
        _this._onAtomSubmissionStateUpdate = function (notification) {
            RadixLogger_1.logger.info('Atom Submission state update', notification);
            // Handle atom state update
            var subscriberId = notification.subscriberId;
            var value = notification.value;
            var message = notification.message;
            var subject = _this._atomUpdateSubjects[subscriberId];
            switch (value) {
                case 'SUBMITTING':
                case 'SUBMITTED':
                    subject.next(value);
                    break;
                case 'STORED':
                    subject.next(value);
                    subject.complete();
                    break;
                case 'COLLISION':
                case 'ILLEGAL_STATE':
                case 'UNSUITABLE_PEER':
                case 'VALIDATION_ERROR':
                    subject.error(value + ': ' + message);
                    break;
            }
        };
        _this._onAtomReceivedNotification = function (notification) {
            var e_1, _a;
            RadixLogger_1.logger.info('Atom received', notification);
            // Store atom for testing
            // let jsonPath = './atomNotification.json'
            // // let jsonPath = path.join(__dirname, '..', '..', '..', '..', 'atomNotification.json')
            // logger.info(jsonPath)
            // fs.writeFile(jsonPath, JSON.stringify(notification), (error) => {
            //    // Throws an error, you could also catch it here
            //    if (error) { throw error }
            //    // Success case, the file was saved
            //    logger.info('Atom saved!')
            // })
            var deserializedAtoms = RadixAtomModel_1.RadixSerializer.fromJson(notification.atoms);
            RadixLogger_1.logger.info(deserializedAtoms);
            // Check HIDs for testing
            for (var i = 0; i < deserializedAtoms.length; i++) {
                var deserializedAtom = deserializedAtoms[i];
                var serializedAtom = notification.atoms[i];
                if (serializedAtom.hid &&
                    deserializedAtom.hid.equals(RadixAtomModel_1.RadixEUID.fromJson(serializedAtom.hid))) {
                    RadixLogger_1.logger.info('HID match');
                }
                else if (serializedAtom.hid) {
                    RadixLogger_1.logger.error('HID mismatch');
                }
            }
            // Forward atoms to correct wallets
            var subscription = _this._subscriptions[notification.subscriberId];
            try {
                for (var deserializedAtoms_1 = tslib_1.__values(deserializedAtoms), deserializedAtoms_1_1 = deserializedAtoms_1.next(); !deserializedAtoms_1_1.done; deserializedAtoms_1_1 = deserializedAtoms_1.next()) {
                    var atom = deserializedAtoms_1_1.value;
                    subscription.next({
                        action: 'STORE',
                        atom: atom,
                    });
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (deserializedAtoms_1_1 && !deserializedAtoms_1_1.done && (_a = deserializedAtoms_1.return)) _a.call(deserializedAtoms_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        _this.node = node;
        return _this;
    }
    RadixNodeConnection.prototype.getSubscriberId = function () {
        this.lastSubscriberId++;
        return this.lastSubscriberId;
    };
    /**
     * Check whether the node connection is ready for requests
     * @returns true if ready
     */
    RadixNodeConnection.prototype.isReady = function () {
        return this._socket && this._socket.ready;
    };
    /**
     * Opens connection
     * @returns a promise that resolves once the connection is ready, or rejects on error or timeout
     */
    RadixNodeConnection.prototype.openConnection = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        _this.address = _this.nodeRPCAddress(_this.node.host.ip);
                        // For testing atom queueing during connection issues
                        // if (Math.random() > 0.1) {
                        //    this.address += 'garbage'
                        // }
                        RadixLogger_1.logger.info("Connecting to " + _this.address);
                        _this._socket = new rpc_websockets_1.Client(_this.address, {
                            reconnect: false
                        });
                        _this._socket.on('close', _this._onClosed);
                        _this._socket.on('error', function (error) {
                            RadixLogger_1.logger.error(error);
                            reject(error);
                        });
                        setTimeout(function () {
                            if (!_this._socket.ready) {
                                RadixLogger_1.logger.debug('Socket timeout');
                                _this._socket.close();
                                _this.emit('closed');
                                reject('Timeout');
                            }
                        }, 5000);
                        _this._socket.on('open', function () {
                            // this.pingInterval = setInterval(this.ping, 10000)
                            _this.emit('open');
                            _this._socket.on('Atoms.subscribeUpdate', _this._onAtomReceivedNotification);
                            _this._socket.on('AtomSubmissionState.onNext', _this._onAtomSubmissionStateUpdate);
                            resolve();
                        });
                    })];
            });
        });
    };
    /**
     * Subscribe for all existing and future atoms for a given address
     * @param address base58 formatted address
     * @returns a stream of atoms
     */
    RadixNodeConnection.prototype.subscribe = function (address) {
        var subscriberId = this.getSubscriberId();
        var subscription = new Rx_1.Subject();
        this._subscriptions[subscriberId] = subscription;
        this._socket
            .call('Atoms.subscribe', {
            subscriberId: subscriberId,
            query: {
                destinationAddress: address,
            },
        })
            .then(function (response) {
            RadixLogger_1.logger.info("Subscribed for address " + address, response);
        })
            .catch(function (error) {
            RadixLogger_1.logger.error(error);
            subscription.error(error);
        });
        return subscription;
    };
    /**
     * Submit an atom to the ledger
     * @param atom
     * @returns A stream of the status of the atom submission
     */
    RadixNodeConnection.prototype.submitAtom = function (atom) {
        // Store atom for testing
        // let jsonPath = path.join('./submitAtom.json')
        // logger.info(jsonPath)
        // fs.writeFile(jsonPath, JSON.stringify(atom.toJson()), (error) => {
        //    // Throws an error, you could also catch it here
        //    if (error) { throw error }
        var _this = this;
        //    // Success case, the file was saved
        //    logger.info('Atom saved!')
        // })
        var subscriberId = this.getSubscriberId();
        var atomStateSubject = new Rx_1.BehaviorSubject('CREATED');
        this._atomUpdateSubjects[subscriberId] = atomStateSubject;
        var timeout = setTimeout(function () {
            _this._socket.close();
            atomStateSubject.error('Socket timeout');
        }, 5000);
        this._socket
            .call('Universe.submitAtomAndSubscribe', {
            subscriberId: subscriberId,
            atom: atom.toJson()
        })
            .then(function () {
            clearTimeout(timeout);
            atomStateSubject.next('SUBMITTED');
        })
            .catch(function (error) {
            clearTimeout(timeout);
            atomStateSubject.error(error);
        });
        return atomStateSubject;
    };
    /**
     * NOT IMPLEMENTED
     * Query the ledger for an atom by its id
     * @param id
     * @returns The atom
     */
    RadixNodeConnection.prototype.getAtomById = function (id) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                // TODO: everything
                return [2 /*return*/, this._socket
                        .call('Atoms.getAtomInfo', { id: id.toJson() })
                        .then(function (response) {
                        return RadixAtomModel_1.RadixSerializer.fromJson(response.result);
                    })];
            });
        });
    };
    return RadixNodeConnection;
}(events_1.default.EventEmitter));
exports.RadixNodeConnection = RadixNodeConnection;
exports.default = RadixNodeConnection;
//# sourceMappingURL=data:application/json;base64,