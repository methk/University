"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var rxjs_1 = require("rxjs");
var typescript_map_1 = require("typescript-map");
var RadixKeyPair_1 = tslib_1.__importDefault(require("../wallet/RadixKeyPair"));
var RadixTokenManager_1 = require("../token/RadixTokenManager");
var RadixConfig_1 = require("../common/RadixConfig");
var RadixAtomModel_1 = require("../RadixAtomModel");
var RadixTransferAccountSystem = /** @class */ (function () {
    function RadixTransferAccountSystem(keyPair) {
        this.keyPair = keyPair;
        this.name = 'TRANSFER';
        this.transactions = new typescript_map_1.TSMap();
        this.balance = {};
        this.transactionSubject = new rxjs_1.Subject();
        this.unspentConsumables = new typescript_map_1.TSMap();
        this.spentConsumables = new typescript_map_1.TSMap();
        // Add default radix token to balance
        this.balance[RadixTokenManager_1.radixTokenManager.getTokenByISO(RadixConfig_1.radixConfig.mainTokenISO).id.toString()] = 0;
        this.balanceSubject = new rxjs_1.BehaviorSubject(this.balance);
    }
    RadixTransferAccountSystem.prototype.processAtomUpdate = function (atomUpdate) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var atom;
            return tslib_1.__generator(this, function (_a) {
                atom = atomUpdate.atom;
                if (atom.serializer !== RadixAtomModel_1.RadixTransactionAtom.SERIALIZER) {
                    return [2 /*return*/];
                }
                if (atomUpdate.action === 'STORE') {
                    this.processStoreAtom(atom);
                }
                else if (atomUpdate.action === 'DELETE') {
                    this.processDeleteAtom(atom);
                }
                return [2 /*return*/];
            });
        });
    };
    RadixTransferAccountSystem.prototype.processStoreAtom = function (atom) {
        var e_1, _a, e_2, _b, e_3, _c;
        // Skip existing atoms
        if (this.transactions.has(atom.hid.toString())) {
            return;
        }
        var transactionUpdate = {
            action: 'STORE',
            hid: atom.hid.toString(),
            transaction: {
                hid: atom.hid.toString(),
                balance: {},
                fee: 0,
                participants: {},
                timestamp: atom.timestamps.default,
                message: ''
            }
        };
        var transaction = transactionUpdate.transaction;
        // Get transaction message
        if (typeof atom.payload === 'string') {
            transaction.message = atom.payload;
        }
        try {
            // Get transaction details
            for (var _d = tslib_1.__values(atom.particles), _e = _d.next(); !_e.done; _e = _d.next()) {
                var particle = _e.value;
                var tokenId = particle.asset_id.toString();
                if (!RadixTokenManager_1.radixTokenManager.getTokenByID(tokenId)) {
                    throw new Error('Unsuporeted Token Class');
                }
                var ownedByMe = false;
                try {
                    for (var _f = (e_2 = void 0, tslib_1.__values(particle.owners)), _g = _f.next(); !_g.done; _g = _f.next()) {
                        var owner = _g.value;
                        if (owner.public.data.equals(this.keyPair.getPublic())) {
                            ownedByMe = true;
                            break;
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                var isFee = particle.serializer === RadixAtomModel_1.RadixAtomFeeConsumable.SERIALIZER;
                if (ownedByMe && !isFee) {
                    var quantity = 0;
                    if (particle.serializer === RadixAtomModel_1.RadixConsumer.SERIALIZER) {
                        quantity -= particle.quantity;
                        this.unspentConsumables.delete(particle._id);
                        this.spentConsumables.set(particle._id, particle);
                    }
                    else if (particle.serializer === RadixAtomModel_1.RadixConsumable.SERIALIZER ||
                        particle.serializer === RadixAtomModel_1.RadixEmission.SERIALIZER) {
                        quantity += particle.quantity;
                        if (!this.spentConsumables.has(particle._id)) {
                            this.unspentConsumables.set(particle._id, particle);
                        }
                    }
                    if (!(tokenId in transaction.balance)) {
                        transaction.balance[tokenId] = 0;
                    }
                    transaction.balance[tokenId] += quantity;
                }
                else if (!ownedByMe && !isFee) {
                    try {
                        for (var _h = (e_3 = void 0, tslib_1.__values(particle.owners)), _j = _h.next(); !_j.done; _j = _h.next()) {
                            var owner = _j.value;
                            var keyPair = RadixKeyPair_1.default.fromRadixECKeyPair(owner);
                            transaction.participants[keyPair.getAddress()] = keyPair.getAddress();
                        }
                    }
                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                    finally {
                        try {
                            if (_j && !_j.done && (_c = _h.return)) _c.call(_h);
                        }
                        finally { if (e_3) throw e_3.error; }
                    }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.transactions.set(transactionUpdate.hid, transaction);
        // Update balance
        for (var tokenId in transaction.balance) {
            if (!(tokenId in this.balance)) {
                this.balance[tokenId] = 0;
            }
            this.balance[tokenId] += transaction.balance[tokenId];
        }
        this.balanceSubject.next(this.balance);
        this.transactionSubject.next(transactionUpdate);
    };
    RadixTransferAccountSystem.prototype.processDeleteAtom = function (atom) {
        var e_4, _a, e_5, _b;
        // Skip nonexisting atoms
        if (!this.transactions.has(atom.hid.toString())) {
            return;
        }
        var hid = atom.hid.toString();
        var transaction = this.transactions.get(hid);
        var transactionUpdate = {
            action: 'DELETE',
            hid: hid,
            transaction: transaction,
        };
        try {
            // Update consumables
            for (var _c = tslib_1.__values(atom.particles), _d = _c.next(); !_d.done; _d = _c.next()) {
                var particle = _d.value;
                var tokenId = particle.asset_id.toString();
                if (!RadixTokenManager_1.radixTokenManager.getCurrentTokens()[tokenId]) {
                    throw new Error('Unsuporeted Token Class');
                }
                var ownedByMe = false;
                try {
                    for (var _e = (e_5 = void 0, tslib_1.__values(particle.owners)), _f = _e.next(); !_f.done; _f = _e.next()) {
                        var owner = _f.value;
                        if (owner.public.data.equals(this.keyPair.getPublic())) {
                            ownedByMe = true;
                            break;
                        }
                    }
                }
                catch (e_5_1) { e_5 = { error: e_5_1 }; }
                finally {
                    try {
                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                    }
                    finally { if (e_5) throw e_5.error; }
                }
                var isFee = particle.serializer === RadixAtomModel_1.RadixAtomFeeConsumable.SERIALIZER;
                if (ownedByMe && !isFee) {
                    if (particle.serializer === RadixAtomModel_1.RadixConsumer.SERIALIZER) {
                        this.unspentConsumables.set(particle._id, particle);
                        this.spentConsumables.delete(particle._id);
                    }
                    else if (particle.serializer === RadixAtomModel_1.RadixConsumable.SERIALIZER ||
                        particle.serializer === RadixAtomModel_1.RadixEmission.SERIALIZER) {
                        this.unspentConsumables.delete(particle._id);
                    }
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_4) throw e_4.error; }
        }
        // Update balance
        for (var tokenId in transaction.balance) {
            if (!(tokenId in this.balance)) {
                this.balance[tokenId] = 0;
            }
            this.balance[tokenId] -= transaction.balance[tokenId];
        }
        this.balanceSubject.next(this.balance);
        this.transactionSubject.next(transactionUpdate);
    };
    RadixTransferAccountSystem.prototype.getAllTransactions = function () {
        var _this = this;
        return rxjs_1.Observable.create(function (observer) {
            var e_6, _a;
            try {
                // Send all old transactions
                for (var _b = tslib_1.__values(_this.transactions.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var transaction = _c.value;
                    var transactionUpdate = {
                        action: 'STORE',
                        hid: transaction.hid,
                        transaction: transaction
                    };
                    observer.next(transactionUpdate);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_6) throw e_6.error; }
            }
            // Subscribe for new ones
            _this.transactionSubject.subscribe(observer);
        });
    };
    RadixTransferAccountSystem.prototype.getUnspentConsumables = function () {
        return this.unspentConsumables;
    };
    return RadixTransferAccountSystem;
}());
exports.default = RadixTransferAccountSystem;
//# sourceMappingURL=data:application/json;base64,