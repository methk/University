"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var RadixECIES_1 = tslib_1.__importDefault(require("../crypto/RadixECIES"));
var RadixIdentity_1 = tslib_1.__importDefault(require("./RadixIdentity"));
var RadixAccount_1 = tslib_1.__importDefault(require("../account/RadixAccount"));
var RadixSimpleIdentity = /** @class */ (function (_super) {
    tslib_1.__extends(RadixSimpleIdentity, _super);
    function RadixSimpleIdentity(keyPair) {
        var _this = _super.call(this) || this;
        _this.keyPair = keyPair;
        _this.account = new RadixAccount_1.default(keyPair);
        _this.account.enableDecryption(_this);
        return _this;
    }
    RadixSimpleIdentity.prototype.signAtom = function (atom) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var signature, signatureId;
            var _a;
            return tslib_1.__generator(this, function (_b) {
                signature = this.keyPair.sign(atom.getHash());
                signatureId = this.keyPair.getUID();
                atom.signatures = (_a = {}, _a[signatureId.toString()] = signature, _a);
                return [2 /*return*/, atom];
            });
        });
    };
    RadixSimpleIdentity.prototype.decryptECIESPayload = function (payload) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, RadixECIES_1.default.decrypt(this.keyPair.getPrivate(), payload)];
            });
        });
    };
    RadixSimpleIdentity.prototype.getPublicKey = function () {
        return Buffer.from(this.keyPair.keyPair.getPublic().encode('be', true));
    };
    return RadixSimpleIdentity;
}(RadixIdentity_1.default));
exports.default = RadixSimpleIdentity;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhTaW1wbGVJZGVudGl0eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2R1bGVzL2lkZW50aXR5L1JhZGl4U2ltcGxlSWRlbnRpdHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNEVBQTZDO0FBQzdDLDBFQUEyQztBQUMzQyxpRkFBa0Q7QUFJbEQ7SUFBaUQsK0NBQWE7SUFDMUQsNkJBQXFCLE9BQXFCO1FBQTFDLFlBQ0ksaUJBQU8sU0FLVjtRQU5vQixhQUFPLEdBQVAsT0FBTyxDQUFjO1FBR3RDLEtBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxzQkFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBRXhDLEtBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsS0FBSSxDQUFDLENBQUE7O0lBQ3ZDLENBQUM7SUFFWSxzQ0FBUSxHQUFyQixVQUFzQixJQUFlOzs7OztnQkFDM0IsU0FBUyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFBO2dCQUM3QyxXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQTtnQkFFekMsSUFBSSxDQUFDLFVBQVUsYUFBSyxHQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsSUFBRyxTQUFTLEtBQUUsQ0FBQTtnQkFFekQsc0JBQU8sSUFBSSxFQUFBOzs7S0FDZDtJQUVZLGlEQUFtQixHQUFoQyxVQUFpQyxPQUFlOzs7Z0JBQzVDLHNCQUFPLG9CQUFVLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLEVBQUUsT0FBTyxDQUFDLEVBQUE7OztLQUNoRTtJQUVNLDBDQUFZLEdBQW5CO1FBQ0ksT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQTtJQUMzRSxDQUFDO0lBQ0wsMEJBQUM7QUFBRCxDQUFDLEFBekJELENBQWlELHVCQUFhLEdBeUI3RCJ9