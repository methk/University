"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var RadixUtil_1 = tslib_1.__importDefault(require("../common/RadixUtil"));
var RadixAtomModel_1 = require("../RadixAtomModel");
var crypto_1 = tslib_1.__importDefault(require("crypto"));
var RadixKeyStore = /** @class */ (function () {
    function RadixKeyStore() {
    }
    /**
     * Encrypt a private key
     * @param keyPair
     * @param password
     * @returns
     */
    RadixKeyStore.encryptKey = function (keyPair, password) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var privateKey = keyPair.keyPair.getPrivate('hex');
            // Derrive key
            var salt = crypto_1.default.randomBytes(32).toString('hex');
            var iterations = 100000;
            var keylen = 32;
            var digest = 'sha512';
            crypto_1.default.pbkdf2(password, salt, iterations, keylen, digest, function (error, derivedKey) {
                if (error) {
                    reject(error);
                }
                // Encrypt private keys with derrived key
                var algorithm = 'aes-256-ctr';
                var iv = crypto_1.default.randomBytes(16);
                var cipher = crypto_1.default.createCipheriv(algorithm, derivedKey, iv);
                var ciphertext = Buffer.concat([
                    cipher.update(privateKey),
                    cipher.final(),
                ]);
                // Compute MAC
                var mac = _this.calculateMac(derivedKey, ciphertext);
                var fileContents = {
                    crypto: {
                        cipher: algorithm,
                        cipherparams: {
                            iv: iv.toString('hex'),
                        },
                        ciphertext: ciphertext.toString('hex'),
                        pbkdfparams: {
                            iterations: iterations,
                            keylen: keylen,
                            digest: digest,
                            salt: salt,
                        },
                        mac: mac.toString('hex'),
                    },
                    id: keyPair.getUID().toString(),
                };
                resolve(fileContents);
            });
        });
    };
    /**
     * Decrypts an encrypted private key
     * @param fileContents
     * @param password
     * @returns key
     */
    RadixKeyStore.decryptKey = function (fileContents, password) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            // Derrive key
            var salt = fileContents.crypto.pbkdfparams.salt;
            var iterations = fileContents.crypto.pbkdfparams.iterations;
            var keylen = fileContents.crypto.pbkdfparams.keylen;
            var digest = fileContents.crypto.pbkdfparams.digest;
            crypto_1.default.pbkdf2(password, salt, iterations, keylen, digest, function (error, derivedKey) {
                if (error) {
                    return reject(error);
                }
                // Decrypt ciphertext
                var algorithm = fileContents.crypto.cipher;
                var iv = Buffer.from(fileContents.crypto.cipherparams.iv, 'hex');
                var ciphertext = Buffer.from(fileContents.crypto.ciphertext, 'hex');
                // Check MAC
                var mac = Buffer.from(fileContents.crypto.mac, 'hex');
                var computedMac = _this.calculateMac(derivedKey, ciphertext);
                if (!computedMac.equals(mac)) {
                    return reject('MAC mismatch');
                }
                var decipher = crypto_1.default.createDecipheriv(algorithm, derivedKey, iv);
                var privateKey = Buffer.concat([
                    decipher.update(ciphertext),
                    decipher.final(),
                ]).toString();
                // Create wallet
                var keyPair = RadixAtomModel_1.RadixKeyPair.fromPrivate(privateKey);
                return resolve(keyPair);
            });
        });
    };
    RadixKeyStore.calculateMac = function (derivedKey, ciphertext) {
        var dataToMac = Buffer.concat([derivedKey, ciphertext]);
        return RadixUtil_1.default.hash(dataToMac);
    };
    return RadixKeyStore;
}());
exports.default = RadixKeyStore;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhLZXlTdG9yZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2R1bGVzL2NyeXB0by9SYWRpeEtleVN0b3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDBFQUEyQztBQUUzQyxvREFBZ0Q7QUFDaEQsMERBQTJCO0FBRTNCO0lBQUE7SUE2SUEsQ0FBQztJQTNJRzs7Ozs7T0FLRztJQUNXLHdCQUFVLEdBQXhCLFVBQXlCLE9BQXFCLEVBQUUsUUFBZ0I7UUFBaEUsaUJBNERDO1FBM0RHLE9BQU8sSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTTtZQUMvQixJQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQTtZQUVwRCxjQUFjO1lBQ2QsSUFBTSxJQUFJLEdBQUcsZ0JBQU0sQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFBO1lBQ25ELElBQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQTtZQUN6QixJQUFNLE1BQU0sR0FBRyxFQUFFLENBQUE7WUFDakIsSUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFBO1lBRXZCLGdCQUFNLENBQUMsTUFBTSxDQUNULFFBQVEsRUFDUixJQUFJLEVBQ0osVUFBVSxFQUNWLE1BQU0sRUFDTixNQUFNLEVBQ04sVUFBQyxLQUFLLEVBQUUsVUFBVTtnQkFDZCxJQUFJLEtBQUssRUFBRTtvQkFDUCxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUE7aUJBQ2hCO2dCQUVELHlDQUF5QztnQkFDekMsSUFBTSxTQUFTLEdBQUcsYUFBYSxDQUFBO2dCQUMvQixJQUFNLEVBQUUsR0FBRyxnQkFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQTtnQkFDakMsSUFBTSxNQUFNLEdBQUcsZ0JBQU0sQ0FBQyxjQUFjLENBQ2hDLFNBQVMsRUFDVCxVQUFVLEVBQ1YsRUFBRSxDQUNM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