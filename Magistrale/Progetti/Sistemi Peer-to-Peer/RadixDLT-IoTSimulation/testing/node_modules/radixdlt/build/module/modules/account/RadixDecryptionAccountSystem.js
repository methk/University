import RadixECIES from '../crypto/RadixECIES';
import { logger } from '../common/RadixLogger';
export default class RadixDecryptionAccountSystem {
    constructor(decryptionProvider) {
        this.name = 'DECRYPTION';
        if (decryptionProvider) {
            this.decryptionProvider = decryptionProvider;
        }
    }
    async processAtomUpdate(atomUpdate) {
        const atom = atomUpdate.atom;
        if (this.decryptionProvider &&
            atom.hasOwnProperty('encryptor') &&
            atom.hasOwnProperty('encrypted')) {
            let privateKey = null;
            for (const protector of atom.encryptor
                .protectors) {
                try {
                    privateKey = await this.decryptionProvider.decryptECIESPayload(protector.data);
                }
                catch (error) {
                    // Do nothing
                }
            }
            if (privateKey) {
                try {
                    const rawPayload = await RadixECIES.decrypt(privateKey, atom.encrypted.data);
                    atom.payload = rawPayload.toString();
                }
                catch (error) {
                    logger.error('Decrypted a protector but unable to decrypt payload', atom);
                }
            }
            else {
                logger.trace('Unable to decrypt any protectors', atom);
            }
        }
        else if (atom.hasOwnProperty('encrypted') &&
            !atom.hasOwnProperty('encryptor')) {
            atom.payload = atom.encrypted.data.toString();
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhEZWNyeXB0aW9uQWNjb3VudFN5c3RlbS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2R1bGVzL2FjY291bnQvUmFkaXhEZWNyeXB0aW9uQWNjb3VudFN5c3RlbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLFVBQVUsTUFBTSxzQkFBc0IsQ0FBQTtBQUc3QyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sdUJBQXVCLENBQUE7QUFFOUMsTUFBTSxDQUFDLE9BQU8sT0FBTyw0QkFBNEI7SUFJN0MsWUFBWSxrQkFBNEM7UUFIakQsU0FBSSxHQUFHLFlBQVksQ0FBQTtRQUl0QixJQUFJLGtCQUFrQixFQUFFO1lBQ3BCLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxrQkFBa0IsQ0FBQTtTQUMvQztJQUNMLENBQUM7SUFFTSxLQUFLLENBQUMsaUJBQWlCLENBQUMsVUFBMkI7UUFDdEQsTUFBTSxJQUFJLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQTtRQUU1QixJQUNJLElBQUksQ0FBQyxrQkFBa0I7WUFDdkIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUM7WUFDaEMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsRUFDbEM7WUFDRSxJQUFJLFVBQVUsR0FBRyxJQUFJLENBQUE7WUFFckIsS0FBSyxNQUFNLFNBQVMsSUFBSyxJQUF5QixDQUFDLFNBQVM7aUJBQ3ZELFVBQVUsRUFBRTtnQkFDYixJQUFJO29CQUNBLFVBQVUsR0FBRyxNQUFNLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxtQkFBbUIsQ0FDMUQsU0FBUyxDQUFDLElBQUksQ0FDakIsQ0FBQTtpQkFDSjtnQkFBQyxPQUFPLEtBQUssRUFBRTtvQkFDWixhQUFhO2lCQUNoQjthQUNKO1lBRUQsSUFBSSxVQUFVLEVBQUU7Z0JBQ1osSUFBSTtvQkFDQSxNQUFNLFVBQVUsR0FBRyxNQUFNLFVBQVUsQ0FBQyxPQUFPLENBQ3ZDLFVBQVUsRUFDVCxJQUF5QixDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQzVDLENBQUE7b0JBQ0QsSUFBSSxDQUFDLE9BQU8sR0FBRyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUE7aUJBQ3ZDO2dCQUFDLE9BQU8sS0FBSyxFQUFFO29CQUNaLE1BQU0sQ0FBQyxLQUFLLENBQUMscURBQXFELEVBQUUsSUFBSSxDQUFDLENBQUE7aUJBQzVFO2FBQ0o7aUJBQU07Z0JBQ0gsTUFBTSxDQUFDLEtBQUssQ0FBQyxrQ0FBa0MsRUFBRSxJQUFJLENBQUMsQ0FBQTthQUN6RDtTQUNKO2FBQU0sSUFDSCxJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQztZQUNoQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLEVBQ25DO1lBQ0UsSUFBSSxDQUFDLE9BQU8sR0FBSSxJQUF5QixDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUE7U0FDdEU7SUFDTCxDQUFDO0NBQ0oifQ==