import { Subject, Observable } from 'rxjs';
import { TSMap } from 'typescript-map';
import { RadixApplicationPayloadAtom, RadixKeyPair } from '../RadixAtomModel';
export default class RadixMessagingAccountSystem {
    constructor(keyPair) {
        this.keyPair = keyPair;
        this.name = 'RADIX-MESSAGING';
        this.messageSubject = new Subject();
        this.chats = new TSMap();
        this.messages = new TSMap();
    }
    async processAtomUpdate(atomUpdate) {
        const atom = atomUpdate.atom;
        if (atom.serializer !== RadixApplicationPayloadAtom.SERIALIZER || atom.applicationId !== 'radix-messaging') {
            return;
        }
        if (atomUpdate.action === 'STORE') {
            this.processStoreAtom(atom);
        }
        else if (atomUpdate.action === 'DELETE') {
            this.processDeleteAtom(atom);
        }
    }
    startNewChat(to) {
        // Create new chat
        const chatId = to.getAddress();
        if (this.chats.has(chatId)) {
            return;
        }
        const chatDescription = {
            address: to.getAddress(),
            chat_id: chatId,
            title: chatId,
            last_message_timestamp: Date.now(),
            messages: new TSMap()
        };
        // Add at the top
        this.chats.set(chatId, chatDescription);
    }
    processStoreAtom(atom) {
        const hid = atom.hid.toString();
        // Skip existing atoms
        if (this.messages.has(hid)) {
            return;
        }
        if (atom.payload === null) {
            return;
        }
        // Format message
        const payload = JSON.parse(atom.payload);
        // TODO: check owner
        const to = RadixKeyPair.fromAddress(payload.to);
        const from = RadixKeyPair.fromAddress(payload.from);
        // Chat id
        let address = null;
        let isMine = false;
        if (from.equals(this.keyPair)) {
            address = to;
            isMine = true;
        }
        else if (to.equals(this.keyPair)) {
            address = from;
        }
        if (address === null) {
            throw new Error('Error processing a radix-message atom: neither of addresses is owned by this account');
        }
        const chatId = address.toString();
        const message = {
            hid,
            chat_id: chatId,
            to,
            from,
            content: payload.content,
            timestamp: atom.timestamps.default,
            is_mine: isMine
        };
        // Find existing chat
        // Otherwise create new chat
        if (!this.chats.has(chatId)) {
            const newChatDescription = {
                address: address.getAddress(),
                chat_id: chatId,
                title: chatId,
                last_message_timestamp: message.timestamp,
                messages: new TSMap(),
            };
            this.chats.set(chatId, newChatDescription);
        }
        const chatDescription = this.chats.get(chatId);
        if (message.timestamp > chatDescription.last_message_timestamp) {
            chatDescription.last_message_timestamp = message.timestamp;
        }
        chatDescription.messages.set(hid, message);
        // Move chat to the top
        this.chats.delete(chatId);
        this.chats.set(chatId, chatDescription);
        this.messages.set(hid, message);
        const messageUpdate = {
            action: 'STORE',
            hid,
            message,
        };
        this.messageSubject.next(messageUpdate);
    }
    processDeleteAtom(atom) {
        const hid = atom.hid.toString();
        // Skip nonexisting atoms
        if (!this.messages.has(hid)) {
            return;
        }
        const message = this.messages.get(hid);
        this.chats.get(message.chat_id).messages.delete(hid);
        this.messages.delete(hid);
        const messageUpdate = {
            action: 'DELETE',
            hid,
            message,
        };
        this.messageSubject.next(messageUpdate);
    }
    getAllMessages() {
        return Observable.create((observer) => {
            // Send all old transactions
            for (const message of this.messages.values()) {
                const messageUpdate = {
                    action: 'STORE',
                    hid: message.hid,
                    message: message
                };
                observer.next(messageUpdate);
            }
            // Subscribe for new ones
            this.messageSubject.subscribe(observer);
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhNZXNzYWdpbmdBY2NvdW50U3lzdGVtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL21vZHVsZXMvbWVzc2FnaW5nL1JhZGl4TWVzc2FnaW5nQWNjb3VudFN5c3RlbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBWSxNQUFNLE1BQU0sQ0FBQTtBQUNwRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZ0JBQWdCLENBQUE7QUFLdEMsT0FBTyxFQUFFLDJCQUEyQixFQUFhLFlBQVksRUFBbUIsTUFBTSxtQkFBbUIsQ0FBQTtBQUV6RyxNQUFNLENBQUMsT0FBTyxPQUFPLDJCQUEyQjtJQU81QyxZQUFxQixPQUFPO1FBQVAsWUFBTyxHQUFQLE9BQU8sQ0FBQTtRQU5yQixTQUFJLEdBQUcsaUJBQWlCLENBQUE7UUFDeEIsbUJBQWMsR0FBZ0MsSUFBSSxPQUFPLEVBQUUsQ0FBQTtRQUUzRCxVQUFLLEdBQTZCLElBQUksS0FBSyxFQUFFLENBQUE7UUFDN0MsYUFBUSxHQUFnQyxJQUFJLEtBQUssRUFBRSxDQUFBO0lBRTNCLENBQUM7SUFFekIsS0FBSyxDQUFDLGlCQUFpQixDQUFDLFVBQTJCO1FBQ3RELE1BQU0sSUFBSSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUE7UUFFNUIsSUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLDJCQUEyQixDQUFDLFVBQVUsSUFBSyxJQUFvQyxDQUFDLGFBQWEsS0FBSyxpQkFBaUIsRUFBRTtZQUN6SSxPQUFNO1NBQ1Q7UUFFRCxJQUFJLFVBQVUsQ0FBQyxNQUFNLEtBQUssT0FBTyxFQUFFO1lBQy9CLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFtQyxDQUFDLENBQUE7U0FDN0Q7YUFBTSxJQUFJLFVBQVUsQ0FBQyxNQUFNLEtBQUssUUFBUSxFQUFFO1lBQ3ZDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFtQyxDQUFDLENBQUE7U0FD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