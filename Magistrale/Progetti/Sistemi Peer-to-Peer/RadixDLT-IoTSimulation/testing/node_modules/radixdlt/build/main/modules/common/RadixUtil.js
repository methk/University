"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var long_1 = tslib_1.__importDefault(require("long"));
var bn_js_1 = tslib_1.__importDefault(require("bn.js"));
var crypto_1 = tslib_1.__importDefault(require("crypto"));
var RadixUtil = /** @class */ (function () {
    function RadixUtil() {
    }
    RadixUtil.hash = function (data, offset, len) {
        if (offset) {
            data = data.slice(offset, len);
        }
        if (!Buffer.isBuffer(data)) {
            data = Buffer.from(data);
        }
        // Double hash to protect against length extension attacks
        var hash1 = crypto_1.default.createHash('sha256');
        hash1.update(data);
        var hash2 = crypto_1.default.createHash('sha256');
        hash2.update(hash1.digest());
        return hash2.digest();
    };
    RadixUtil.bigIntFromByteArray = function (bytes) {
        return new bn_js_1.default(bytes).fromTwos(bytes.length * 8);
    };
    RadixUtil.byteArrayFromBigInt = function (number) {
        // Compatibility with Java BigInteger.toByteArray() https://stackoverflow.com/a/24158695
        var byteLength = Math.ceil((number.bitLength() + 1) / 8);
        var result = number.toTwos(8 * byteLength).toArrayLike(Buffer);
        if (result.length !== byteLength) {
            var newResult = Buffer.alloc(byteLength, 0);
            result.copy(newResult, byteLength - result.length);
            return newResult;
        }
        return result;
    };
    RadixUtil.longFromBigInt = function (number) {
        // Emulate Java BigInteger.longValue(), following the spec at 5.1.3 https://docs.oracle.com/javase/specs/jls/se7/html/jls-5.html
        var byteLength = Math.max(8, number.byteLength());
        var bytes = number.toTwos(8 * byteLength).toArray('be', byteLength);
        var truncatedBytes = bytes.slice(bytes.length - 8, bytes.length);
        return long_1.default.fromBytesBE(truncatedBytes);
    };
    RadixUtil.bigIntFromLong = function (number) {
        return new bn_js_1.default(number.toBytesBE(), 'be').fromTwos(64);
    };
    RadixUtil.powTargetFromAtomSize = function (size) {
        var target = Buffer.alloc(32, 0xff);
        var leadingBits = Math.ceil(Math.log(size * 8));
        var leadingBytes = Math.floor(leadingBits / 8);
        var leftOverBits = leadingBits % 8;
        target.fill(0, 0, leadingBytes);
        var middleByte = ~(0xff << (8 - leftOverBits)) & 0xff;
        target.writeUInt8(middleByte, leadingBytes);
        return target;
    };
    RadixUtil.shuffleArray = function (arr) {
        return arr
            .map(function (a) { return [Math.random(), a]; })
            .sort(function (a, b) { return a[0] - b[0]; })
            .map(function (a) { return a[1]; });
    };
    return RadixUtil;
}());
exports.default = RadixUtil;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhVdGlsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL21vZHVsZXMvY29tbW9uL1JhZGl4VXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxzREFBdUI7QUFDdkIsd0RBQXNCO0FBQ3RCLDBEQUEyQjtBQUUzQjtJQUFBO0lBMkVBLENBQUM7SUExRWlCLGNBQUksR0FBbEIsVUFDSSxJQUE0QixFQUM1QixNQUFlLEVBQ2YsR0FBWTtRQUVaLElBQUksTUFBTSxFQUFFO1lBQ1IsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFBO1NBQ2pDO1FBRUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDeEIsSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDM0I7UUFFRCwwREFBMEQ7UUFDMUQsSUFBTSxLQUFLLEdBQUcsZ0JBQU0sQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDekMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUVsQixJQUFNLEtBQUssR0FBRyxnQkFBTSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUN6QyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFBO1FBRTVCLE9BQU8sS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFBO0lBQ3pCLENBQUM7SUFFYSw2QkFBbUIsR0FBakMsVUFBa0MsS0FBYTtRQUMzQyxPQUFPLElBQUksZUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFBO0lBQ25ELENBQUM7SUFFYSw2QkFBbUIsR0FBakMsVUFBa0MsTUFBVTtRQUN4Qyx3RkFBd0Y7UUFDeEYsSUFBTSxVQUFVLEdBQUcsSUFB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